**Hello!**

I'm sorry to hear that you're experiencing an issue where the webpage keeps refreshing. This can be frustrating, but I'm here to help you diagnose and solve the problem.

Based on the information you've provided, including recent changes to the code to handle token expiration and refresh, it's possible that there's a loop in your client-side code that's causing the page to reload repeatedly.

Let's investigate possible causes and steps to resolve this issue.

---

## **Possible Causes**

1. **Infinite Redirect Loop to `/login`**

   - If the client-side JavaScript detects that the user is unauthorized, it redirects to `/login`.
   - If this redirection happens in a way that triggers the same code again (e.g., if the `/login` page also runs the same JavaScript code), it can cause an infinite loop of redirections.

2. **Token Refresh Logic Not Working Properly**

   - If the token refresh logic fails and redirects to `/login`, but the redirect doesn't actually clear the expired token, the client may keep trying to access the protected resources, fail, and redirect to `/login` again.

3. **Server-Side Redirection**

   - If the server detects an unauthorized request and redirects to `/login`, and the client keeps making the same request, this can cause a loop.

4. **JavaScript Errors**

   - A JavaScript error may cause the code to behave unexpectedly, potentially leading to the page refreshing.

---

## **Steps to Diagnose and Resolve the Issue**

### **1. Check Browser Developer Tools**

- **Open the Developer Console:**
  - Press `F12` or right-click and select "Inspect" to open the developer tools in your browser.
- **Look at the Network Tab:**
  - Monitor the network requests to see if there's a pattern of repeated requests.
- **Observe Console Errors:**
  - Check for any JavaScript errors or warnings that might indicate where the issue is occurring.

### **2. Review Client-Side Code**

#### **2.1. Infinite Redirect Loop**

- **In `main.js`, look for any code that redirects to `/login`.**
- **Ensure that the redirection only occurs when necessary and doesn't cause an infinite loop.**

For example:

```javascript
function handleUnauthorized() {
    console.log('Unauthorized access, redirecting to login');
    window.location.href = '/login';
}
```

- **Check where `handleUnauthorized()` is called.**
- **Ensure that it's not being called on the `/login` page.**

#### **2.2. Check Token Refresh Logic**

- **Ensure that the token refresh logic is working properly and doesn't cause an infinite loop.**

In the `fetchWithAuth` function:

```javascript
function fetchWithAuth(url, options = {}) {
    options.credentials = 'include';

    return fetch(url, options)
        .then(response => {
            if (response.status === 401) {
                // Token expired, try to refresh
                return fetch('/refresh', { method: 'POST', credentials: 'include' })
                    .then(refreshResponse => {
                        if (!refreshResponse.ok) {
                            throw new Error('Token refresh failed');
                        }
                        return refreshResponse.json();
                    })
                    .then(() => {
                        // Retry the original request after refreshing token
                        return fetch(url, options);
                    })
                    .catch(() => {
                        // If refresh fails, redirect to login
                        window.location.href = '/login';
                    });
            }
            return response;
        });
}
```

- **Problem:** If the `/refresh` endpoint returns a 401 Unauthorized (e.g., if the refresh token has expired), the code redirects to `/login`.
- **If the `/login` page also makes calls that result in 401 errors and triggers the same redirect, it could cause the page to keep refreshing.**

#### **2.3. Ensure Redirects Are Not Looping**

- **Make sure that the `/login` page doesn't include JavaScript code that tries to fetch protected resources.**
- **Check if the `DOMContentLoaded` event handler is being executed on the `/login` page.**

In `main.js`:

```javascript
document.addEventListener('DOMContentLoaded', function() {
    // Code here...
});
```

- **If this code runs on all pages, including `/login`, and contains logic that redirects to `/login` on unauthorized access, it can cause a loop.**

#### **Solution:**

- **Modify your JavaScript code to only run on pages where it's needed.**

##### **Option 1: Use Page-Specific Scripts**

- **Separate your JavaScript code into different files and include them only on the pages where they are needed.**

##### **Option 2: Add Checks to Ensure Code Runs on the Correct Pages**

- **In your `main.js`, add a check to see if the user is on a page that requires authentication.**

Example:

```javascript
document.addEventListener('DOMContentLoaded', function() {
    const isProtectedPage = ['/devices', '/network_usage'].includes(window.location.pathname);

    if (isProtectedPage) {
        checkAuthentication();
        // Initialize socket and other protected resources
        initializeSocket();
        // Load devices, etc.
        loadDevices();
    }
});
```

- **This ensures that the authentication check and protected resource loading only occur on protected pages, preventing unauthorized pages like `/login` from redirecting back to themselves.**

### **3. Adjust `checkAuthentication` Function**

- **Ensure that `checkAuthentication()` only redirects to `/login` when necessary and doesn't run on the `/login` or `/register` pages.**

Modify `checkAuthentication()`:

```javascript
function checkAuthentication() {
    const token = getCookie('access_token_cookie');
    const isLoginPage = window.location.pathname === '/login';
    const isRegisterPage = window.location.pathname === '/register';

    if (!token && !isLoginPage && !isRegisterPage) {
        console.log('No token found, redirecting to login');
        window.location.href = '/login';
    }
}
```

### **4. Review Server-Side Redirects**

- **Ensure that the server is not redirecting unauthorized users to `/login` in a way that could cause loops.**
- **Use appropriate HTTP status codes (e.g., 401 Unauthorized) instead of redirects, and let the client-side code handle navigation.**

### **5. Add Logging to Debug**

- **Add console logs in your JavaScript code to trace the execution flow.**
- **Add logs before redirections to see if they're being triggered unexpectedly.**

Example:

```javascript
function checkAuthentication() {
    console.log('Checking authentication');
    // Rest of the code...
}
```

### **6. Disable Auto-Reload in Development**

- **Ensure that your development environment (e.g., Replit) isn't configured to auto-reload the page on changes.**

### **7. Test Without Token Expiration Logic**

- **Temporarily remove or comment out the token expiration and refresh logic to see if the issue persists.**
- **If the problem goes away, focus on fixing the token handling code.**

---

## **Implementing the Solution**

### **Step-by-Step Changes**

#### **1. Modify `main.js` to Check Page Path**

Update `main.js`:

```javascript
document.addEventListener('DOMContentLoaded', function() {
    const path = window.location.pathname;
    const isProtectedPage = ['/devices', '/network_usage'].includes(path);

    if (isProtectedPage) {
        checkAuthentication();
        initializeSocket();
        loadDevices(); // or other functions relevant to the page
    }
});
```

- **This ensures that authentication checks and protected resources are only loaded on pages that require them.**

#### **2. Update `checkAuthentication()` Function**

Modify `checkAuthentication()`:

```javascript
function checkAuthentication() {
    console.log('Checking authentication');
    const token = getCookie('access_token_cookie');
    const isLoginPage = window.location.pathname === '/login';
    const isRegisterPage = window.location.pathname === '/register';

    if (!token && !isLoginPage && !isRegisterPage) {
        console.log('No token found, redirecting to login');
        window.location.href = '/login';
    }
}
```

#### **3. Ensure Protected Functions Are Not Called on Public Pages**

- **Avoid calling functions like `initializeSocket()` or `loadDevices()` on public pages (`/`, `/login`, `/register`).**

#### **4. Separate JavaScript Files (Optional)**

- **Consider creating separate JavaScript files for different pages.**
- **Include only the necessary scripts in each template.**

Example:

- **Create `devices.js` for the `/devices` page.**
- **In `devices.html`:**

```html
<script src="{{ url_for('static', filename='js/devices.js') }}"></script>
```

- **Do not include `devices.js` in other templates like `login.html`.**

#### **5. Verify Server Responses**

- **Ensure that the server returns appropriate HTTP status codes and messages.**
- **Check that the `/refresh` endpoint is working correctly and that tokens are being refreshed as expected.**

---

## **Testing**

- **After making the changes, test the application thoroughly:**
  - **Access the login page and verify that it doesn't keep redirecting.**
  - **Log in and navigate to protected pages to ensure they work properly.**
  - **Wait for the access token to expire to test the token refresh logic.**
  - **Ensure that after the token expires, the application can refresh it and continue functioning.**

---

## **Conclusion**

By adjusting your client-side code to prevent authentication checks and redirects on public pages, you should be able to stop the webpage from continuously refreshing.

---

**If you have any questions or need further assistance implementing these changes, please let me know. I'm here to help you get your application running smoothly!**
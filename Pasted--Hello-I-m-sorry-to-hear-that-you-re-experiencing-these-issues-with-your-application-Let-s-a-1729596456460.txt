**Hello!**

I'm sorry to hear that you're experiencing these issues with your application. Let's address each problem step by step to help you resolve them.

---

## **Issue 1: Error When Clicking Logout Button**

### **Problem Description**

- When clicking the logout button at `/logout`, you're getting the error:

  ```json
  {
    "msg": "Missing cookie \"access_token_cookie\""
  }
  ```

### **Possible Cause**

The error indicates that the `access_token_cookie` is missing when you attempt to unset it during the logout process. This can happen if:

- The `access_token_cookie` has already expired or been deleted.
- The cookie was not set properly during login.
- There is a mismatch in how the cookies are being handled between the server and client.

### **Solution**

#### **1. Verify JWT Cookie Settings**

In your `app.py`, ensure that the JWT cookie settings are correctly configured to allow the cookies to be sent and received.

**Check the following settings:**

```python
app.config["JWT_TOKEN_LOCATION"] = ["cookies"]
app.config["JWT_ACCESS_COOKIE_PATH"] = "/"  # Ensure the cookie is accessible on all paths
app.config["JWT_REFRESH_COOKIE_PATH"] = "/refresh"
app.config["JWT_COOKIE_SECURE"] = False  # Should be False for HTTP, True for HTTPS
app.config["JWT_COOKIE_SAMESITE"] = "Lax"  # Set to "Lax" or "None" as needed
app.config["JWT_COOKIE_CSRF_PROTECT"] = False  # True if you implement CSRF protection
```

**Explanation:**

- **`JWT_TOKEN_LOCATION`**: Should include `"cookies"` to use cookies for storing JWT tokens.
- **`JWT_COOKIE_SAMESITE`**: If set to `"Strict"`, the cookie may not be sent with cross-site requests, which can cause it to be missing. Setting it to `"Lax"` allows the cookie to be sent with top-level navigation GET requests.
- **`JWT_COOKIE_SECURE`**: Should be `False` when using HTTP (not HTTPS), otherwise the cookies won't be sent.

#### **2. Adjust Cookie Settings**

Update your JWT configuration in `app.py`:

```python
app.config["JWT_COOKIE_SECURE"] = False  # Ensure this is False if not using HTTPS
app.config["JWT_COOKIE_SAMESITE"] = "Lax"  # Set to "Lax" to allow cookies in normal requests
```

#### **3. Verify Cookie Handling in Logout Route**

In your `routes.py`, your logout route is:

```python
@main.route('/logout')
def logout():
    logging.info("User logged out")
    response = make_response(redirect(url_for('main.login')))
    unset_jwt_cookies(response)
    return response
```

**Possible Issue:**

- If the `access_token_cookie` is missing when `unset_jwt_cookies` is called, it can raise an error.

**Solution:**

- Modify the logout route to handle the case where the cookie might be missing.

**Update the Logout Route:**

```python
from flask_jwt_extended import jwt_required

@main.route('/logout')
@jwt_required(optional=True)
def logout():
    logging.info("User logged out")
    response = make_response(redirect(url_for('main.login')))
    unset_jwt_cookies(response)
    return response
```

**Explanation:**

- Using `@jwt_required(optional=True)` allows the route to be accessed even if the JWT is missing.
- `unset_jwt_cookies(response)` will safely unset cookies without raising an error.

#### **4. Update Flask-JWT-Extended Version**

Ensure you're using the latest version of Flask-JWT-Extended, which properly handles unsetting cookies even if they are missing.

**Update your `requirements.txt`:**

```
Flask-JWT-Extended>=4.0
```

Then, run:

```bash
pip install -U Flask-JWT-Extended
```

#### **5. Verify Cookies in Browser**

- Open your browser's developer tools.
- Navigate to the **Application** or **Storage** tab.
- Look under **Cookies** for your application's URL.
- Confirm that `access_token_cookie` and `refresh_token_cookie` are present after login.
- Ensure that they are being removed after logout.

---

## **Issue 2: Redirecting Back to Login After Accessing Protected Pages**

### **Problem Description**

- After logging in, when you navigate to the devices tab or network usage page, you're redirected back to the login page.

### **Possible Causes**

1. **Tokens Not Being Set Properly**

   - The access and refresh tokens may not be properly set in the cookies during login.
   - Cookies may not be sent with subsequent requests due to incorrect settings.

2. **Client-Side Code Redirecting Prematurely**

   - The `checkAuthentication` function in your JavaScript code may be redirecting to login because it doesn't detect the tokens.

3. **Token Expiration**

   - The access token may be expiring immediately due to incorrect time settings.

### **Solution**

#### **1. Verify Tokens are Set During Login**

Check that the tokens are correctly set in the login route.

**In `routes.py`:**

```python
@main.route('/login', methods=['GET', 'POST'])
def login():
    # ... existing code ...

    if user and user.check_password(password):
        access_token = create_access_token(identity=user.id)
        refresh_token = create_refresh_token(identity=user.id)
        response = make_response(redirect(url_for('main.devices')))
        set_access_cookies(response, access_token)
        set_refresh_cookies(response, refresh_token)
        logging.info(f"User {username} logged in successfully.")
        return response
    # ... existing code ...
```

Ensure that `set_access_cookies` and `set_refresh_cookies` are being called with the correct tokens and response object.

#### **2. Check JWT Token Expiry Settings**

In `app.py`, confirm the token expiration settings:

```python
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(minutes=15)
app.config['JWT_REFRESH_TOKEN_EXPIRES'] = timedelta(days=30)
```

- If `JWT_ACCESS_TOKEN_EXPIRES` is set to a very short time or zero, the token may be expiring immediately.

#### **3. Ensure Cookies are Sent with Requests**

In your JavaScript code, ensure that all fetch requests include `credentials: 'include'` to send cookies with the request.

**In `main.js`:**

```javascript
fetch('/api/devices', { credentials: 'include' })
```

- Verify that all fetch requests and WebSocket connections include credentials.

#### **4. Verify `checkAuthentication` Function**

Ensure that the `checkAuthentication` function is correctly detecting the presence of the token.

**Update `checkAuthentication`:**

```javascript
function checkAuthentication() {
    const token = getCookie('access_token_cookie');
    const isLoginPage = window.location.pathname === '/login';
    const isRegisterPage = window.location.pathname === '/register';

    if (!token && !isLoginPage && !isRegisterPage) {
        console.log('No token found, redirecting to login');
        window.location.href = '/login';
    }
}
```

#### **5. Check `getCookie` Function**

Ensure that the `getCookie` function correctly retrieves the cookie.

**In `main.js`:**

```javascript
function getCookie(name) {
    const cookieString = document.cookie;
    const cookies = cookieString.split('; ');
    for (let cookie of cookies) {
        const [key, value] = cookie.split('=');
        if (key === name) {
            return value;
        }
    }
    return null;
}
```

#### **6. Adjust `JWT_COOKIE_SAMESITE` Setting**

In `app.py`, set `JWT_COOKIE_SAMESITE` to `"Lax"` to allow cookies to be sent with top-level navigations.

```python
app.config["JWT_COOKIE_SAMESITE"] = "Lax"
```

#### **7. Verify Server Responses**

- Use browser developer tools to inspect the network requests.
- Check the responses from the server when accessing protected endpoints.
- Look for any 401 Unauthorized responses.

#### **8. Add Logging for Debugging**

Add logging statements in your routes to confirm whether the user is authenticated.

**Example in `devices` route:**

```python
@main.route('/devices')
@jwt_required()
def devices():
    logging.info("Accessing devices route")
    current_user_id = get_jwt_identity()
    logging.info(f"Current user ID: {current_user_id}")
    return render_template('devices.html')
```

---

## **Additional Recommendations**

### **1. Test the Token Refresh Mechanism**

Ensure that the token refresh mechanism works as intended.

- When the access token expires, the client should request a new access token using the refresh token.
- Verify that the `/refresh` endpoint is working and correctly setting a new access token.

### **2. Verify WebSocket Authentication**

Ensure that your WebSocket connections handle authentication properly.

- If the WebSocket connection fails due to missing or expired tokens, it might cause issues in the application flow.

### **3. Cross-Origin Resource Sharing (CORS)**

Ensure that CORS is correctly configured to allow cookies.

**In `app.py`:**

```python
cors.init_app(app, supports_credentials=True)
```

### **4. Update Client-Side Code to Handle Errors Gracefully**

Modify your client-side code to handle authentication errors without causing redirects that could confuse the user.

#### **Modify `main.js` to Prevent Infinite Redirects**

Ensure that the `checkAuthentication` function does not run on the login or register pages.

**Update the `DOMContentLoaded` Event Listener:**

```javascript
document.addEventListener('DOMContentLoaded', function() {
    const path = window.location.pathname;
    const isProtectedPage = ['/devices', '/network_usage'].includes(path);

    if (isProtectedPage) {
        checkAuthentication();
        // Initialize socket and other protected resources
        initializeSocket();
        // Load devices, etc.
        loadDevices();
    }
});
```

---

## **Summary of Steps**

1. **Adjust JWT Cookie Settings**: Ensure that cookies are set with appropriate `Secure` and `SameSite` attributes.

2. **Verify Cookies in Browser**: Use developer tools to confirm that tokens are set and sent with requests.

3. **Handle Missing Cookies in Logout**: Modify the logout route to handle cases where cookies might be missing.

4. **Ensure Tokens Are Set During Login**: Confirm that `set_access_cookies` and `set_refresh_cookies` are called correctly.

5. **Check Client-Side Authentication Handling**: Ensure that your JavaScript code correctly detects authentication status.

6. **Review Token Expiration Settings**: Verify that tokens are not expiring immediately.

7. **Test the Entire Authentication Flow**: From login to accessing protected pages, ensure each step works as expected.

---

## **Testing**

After making the above changes, test your application thoroughly:

- **Login**: Confirm that you can log in successfully and that tokens are set in cookies.

- **Access Protected Pages**: Navigate to the devices and network usage pages to ensure you are not redirected back to login.

- **Logout**: Click the logout button and verify that you are redirected to the login page without errors.

- **Token Expiry**: Wait for the access token to expire and confirm that the refresh mechanism works.

---

## **Conclusion**

By adjusting your JWT cookie settings, verifying that tokens are correctly set and sent, and ensuring your client-side code handles authentication properly, you should be able to resolve these issues.

---

**Please let me know if you have any questions or need further assistance with any of these steps. I'm here to help you get your application running smoothly!**
Replit Repository Structure and File Contents:
==================================================

Directory: ./
--------------------------------------------------
File: ./generated-icon.png
--------------------------------------------------
Could not read file: ./generated-icon.png. Error: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
--------------------------------------------------

File: ./generate_structure.py
--------------------------------------------------
Contents of ./generate_structure.py:
import os

# Output file
OUTPUT_FILE = "replit_repo_structure_and_content.txt"

# Folders and files to include (based on your screenshot)
INCLUDED_ITEMS = {
    "app.py", "generated-icon.png", "main.py", "models.py", 
    "network_scanner.py", "routes.py", "static", "templates"
}

# Function to write repo structure and file contents
def write_repo_structure():
    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write("Replit Repository Structure and File Contents:\n")
        f.write("=" * 50 + "\n\n")

        # Walk through the directory tree
        for root, dirs, files in os.walk("."):
            # Remove the .git directory from the walk
            dirs[:] = [d for d in dirs if d != ".git"]
            # Only include folders and files that match the specified items
            dirs[:] = [d for d in dirs if d in INCLUDED_ITEMS or d in {"css", "js"}]  # Include css, js subdirectories
            files = [file for file in files if file.endswith(('.py', '.html', '.css', '.js', '.png'))]  # Include relevant file types

            # Write the current directory if it's in the included items
            if os.path.basename(root) in INCLUDED_ITEMS or root == ".":
                f.write(f"Directory: {root}/\n")
                f.write("-" * 50 + "\n")

            # Write each file in the current directory
            for file in files:
                file_path = os.path.join(root, file)
                f.write(f"File: {file_path}\n")
                f.write("-" * 50 + "\n")

                try:
                    # Read the contents of the file
                    with open(file_path, "r", encoding="utf-8") as content_file:
                        content = content_file.read()
                        f.write(f"Contents of {file_path}:\n")
                        f.write(content + "\n")
                except Exception as e:
                    f.write(f"Could not read file: {file_path}. Error: {e}\n")

                f.write("-" * 50 + "\n\n")

# Execute the function to document the current repo
if __name__ == "__main__":
    write_repo_structure()
    print(f"Repository structure and content have been written to {OUTPUT_FILE}")

--------------------------------------------------

File: ./network_scanner.py
--------------------------------------------------
Contents of ./network_scanner.py:
import random
from datetime import datetime, timedelta

def generate_mac_address():
    """Generate a random MAC address."""
    return ':'.join(['{:02x}'.format(random.randint(0x00, 0xff)) for _ in range(6)])

def generate_ip_address():
    """Generate a random IP address within a private IP range."""
    return f"192.168.1.{random.randint(2, 254)}"

def generate_device_name():
    """Generate a random device name."""
    device_types = ['Laptop', 'Smartphone', 'Tablet', 'Smart TV', 'Printer', 'Camera']
    return f"{random.choice(device_types)}-{random.randint(1000, 9999)}"

def scan_network():
    """Simulate network scanning by generating a list of devices."""
    devices = []
    for _ in range(random.randint(5, 15)):
        device = {
            'name': generate_device_name(),
            'ip_address': generate_ip_address(),
            'mac_address': generate_mac_address(),
            'status': random.choice([True, False]),
            'blocked': False,
            'last_seen': datetime.utcnow() - timedelta(minutes=random.randint(0, 60))
        }
        devices.append(device)
    return devices

--------------------------------------------------

File: ./extensions.py
--------------------------------------------------
Contents of ./extensions.py:
from flask_sqlalchemy import SQLAlchemy
from flask_jwt_extended import JWTManager
from flask_socketio import SocketIO
from flask_cors import CORS

db = SQLAlchemy()
jwt = JWTManager()
socketio = SocketIO(cors_allowed_origins="*", async_mode='eventlet')
cors = CORS()

--------------------------------------------------

File: ./main.py
--------------------------------------------------
Contents of ./main.py:
import os
from app import create_app
from extensions import socketio

app = create_app()

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    socketio.run(app, host="0.0.0.0", port=port, debug=True)

--------------------------------------------------

File: ./app.py
--------------------------------------------------
Contents of ./app.py:
import os
from flask import Flask
import logging
import eventlet
from datetime import timedelta

eventlet.monkey_patch()

from extensions import db, jwt, socketio, cors
from flask_migrate import Migrate
from routes import main as main_blueprint

def create_app():
    app = Flask(__name__)

    # Setup logging
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]',
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    # Setup secret key and database
    app.secret_key = os.environ.get("FLASK_SECRET_KEY") or "a secret key"
    app.config["SQLALCHEMY_DATABASE_URI"] = os.environ.get("DATABASE_URL")
    app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {
        "pool_recycle": 300,
        "pool_pre_ping": True,
    }

    # Setup JWT
    app.config["JWT_SECRET_KEY"] = os.environ.get("FLASK_SECRET_KEY") or "jwt secret key"
    app.config["JWT_TOKEN_LOCATION"] = ["cookies"]
    app.config["JWT_ACCESS_COOKIE_PATH"] = "/"
    app.config["JWT_REFRESH_COOKIE_PATH"] = "/refresh"
    app.config["JWT_COOKIE_CSRF_PROTECT"] = False
    app.config["JWT_COOKIE_SECURE"] = False  # Set to True in production
    app.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(hours=1)
    app.config['JWT_REFRESH_TOKEN_EXPIRES'] = timedelta(days=30)
    app.config['JWT_COOKIE_SAMESITE'] = 'Lax'

    # Initialize extensions
    db.init_app(app)
    jwt.init_app(app)
    cors.init_app(app, supports_credentials=True)
    socketio.init_app(app, cors_allowed_origins="*", async_mode='eventlet', logger=True, engineio_logger=True)
    
    # Initialize Flask-Migrate
    migrate = Migrate(app, db)

    # Add Socket.IO logging
    logging.getLogger('socketio').setLevel(logging.DEBUG)
    logging.getLogger('engineio').setLevel(logging.DEBUG)

    with app.app_context():
        from models import User, Device, NetworkUsage
        db.create_all()

    # Register the Blueprint
    app.register_blueprint(main_blueprint)

    # Print URL map for debugging
    print("URL Map:")
    print(app.url_map)

    @socketio.on_error_default
    def default_error_handler(e):
        app.logger.error(f'An error occurred: {str(e)}')

    return app

--------------------------------------------------

File: ./image.png
--------------------------------------------------
Could not read file: ./image.png. Error: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
--------------------------------------------------

File: ./models.py
--------------------------------------------------
Contents of ./models.py:
from extensions import db
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime

class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(256))
    is_admin = db.Column(db.Boolean, default=False)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

class Device(db.Model):
    __tablename__ = 'devices'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)
    ip_address = db.Column(db.String(45), nullable=False, index=True)
    mac_address = db.Column(db.String(17), unique=True, nullable=False, index=True)
    status = db.Column(db.Boolean, default=True)
    blocked = db.Column(db.Boolean, default=False)
    last_seen = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    data_usage = db.Column(db.BigInteger, default=0)  # Total data usage in bytes
    last_usage_update = db.Column(db.DateTime, default=datetime.utcnow)
    bandwidth_limit = db.Column(db.Integer, default=0)  # Bandwidth limit in Mbps (0 = unlimited)
    notes = db.Column(db.Text, nullable=True)  # Admin notes about the device

    def update_data_usage(self, bytes_used):
        if self.data_usage is None:
            self.data_usage = 0
        self.data_usage += bytes_used
        self.last_usage_update = datetime.utcnow()
        new_usage = NetworkUsage(device_id=self.id, data_used=bytes_used)
        db.session.add(new_usage)

    def get_hourly_usage(self):
        hourly_usage = db.session.query(
            db.func.date_trunc('hour', NetworkUsage.timestamp).label('hour'),
            db.func.sum(NetworkUsage.data_used).label('total_usage')
        ).filter(NetworkUsage.device_id == self.id)\
         .group_by('hour')\
         .order_by('hour')\
         .all()
        return [(usage.hour, usage.total_usage) for usage in hourly_usage]

class NetworkUsage(db.Model):
    __tablename__ = 'network_usage'
    id = db.Column(db.Integer, primary_key=True)
    device_id = db.Column(db.Integer, db.ForeignKey('devices.id'), nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    data_used = db.Column(db.BigInteger)  # Data used in bytes

    device = db.relationship('Device', backref=db.backref('usage_history', lazy='dynamic'))

class NetworkSettings(db.Model):
    __tablename__ = 'network_settings'
    id = db.Column(db.Integer, primary_key=True)
    setting_name = db.Column(db.String(64), unique=True, nullable=False)
    setting_value = db.Column(db.String(256))
    description = db.Column(db.Text)
    last_modified = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    modified_by = db.Column(db.Integer, db.ForeignKey('users.id'))

--------------------------------------------------

File: ./routes.py
--------------------------------------------------
Contents of ./routes.py:
from flask import Blueprint, render_template, request, jsonify, redirect, url_for, flash, make_response, current_app
from flask_jwt_extended import (
    create_access_token, create_refresh_token, jwt_required, get_jwt_identity,
    set_access_cookies, set_refresh_cookies, unset_jwt_cookies, get_jwt,
    verify_jwt_in_request
)
from extensions import db, jwt, socketio
from models import User, Device, NetworkUsage, NetworkSettings
from network_scanner import scan_network
import logging
from datetime import datetime, timedelta
from flask_socketio import emit
from sqlalchemy import func, desc
import random
import eventlet
from functools import wraps

main = Blueprint('main', __name__)

logging.basicConfig(level=logging.DEBUG)

def admin_required(fn):
    @wraps(fn)
    def wrapper(*args, **kwargs):
        try:
            verify_jwt_in_request()
            current_user_id = get_jwt_identity()
            user = User.query.get(current_user_id)
            if not user or not user.is_admin:
                return redirect(url_for('main.login'))
            return fn(*args, **kwargs)
        except Exception as e:
            logging.error(f"Admin access error: {str(e)}")
            return redirect(url_for('main.login'))
    return wrapper

@main.route('/')
def index():
    logging.info("Accessing index route")
    return render_template('index.html')

@main.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']

        try:
            # Make the first user an admin
            is_admin = User.query.count() == 0
            user = User(username=username, email=email, is_admin=is_admin)
            user.set_password(password)
            db.session.add(user)
            db.session.commit()
            
            if is_admin:
                logging.info(f"First user {username} registered as admin")
            return redirect(url_for('main.login'))
        except Exception as e:
            logging.error(f"Error during registration: {str(e)}")
            db.session.rollback()
            flash('Registration failed. Please try again.', 'error')

    return render_template('register.html')

@main.route('/login', methods=['GET', 'POST'])
def login():
    logging.info("Accessing login route")
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        user = User.query.filter_by(username=username).first()
        if user and user.check_password(password):
            access_token = create_access_token(
                identity=user.id,
                additional_claims={'is_admin': user.is_admin}
            )
            refresh_token = create_refresh_token(identity=user.id)
            
            response = make_response(redirect(url_for('main.devices')))
            set_access_cookies(response, access_token)
            set_refresh_cookies(response, refresh_token)
            return response
        else:
            logging.warning(f"Failed login attempt for user {username}")
            flash('Invalid username or password', 'error')
    
    return render_template('login.html')

@main.route('/refresh', methods=['POST'])
@jwt_required(refresh=True)
def refresh():
    try:
        current_user = get_jwt_identity()
        access_token = create_access_token(identity=current_user)
        
        response = jsonify({'msg': 'Token refreshed successfully'})
        set_access_cookies(response, access_token)
        
        return response
    except Exception as e:
        logging.error(f"Error refreshing token: {str(e)}")
        return jsonify({"msg": "Token refresh failed"}), 401

@main.route('/logout')
@jwt_required(optional=True)
def logout():
    logging.info("User logged out")
    response = make_response(redirect(url_for('main.login')))
    unset_jwt_cookies(response)
    return response

@main.route('/devices')
@jwt_required()
def devices():
    logging.info("Accessing devices route")
    current_user = get_jwt_identity()
    logging.info(f"User {current_user} accessing devices page")
    return render_template('devices.html')

@main.route('/api/devices', methods=['GET'])
@jwt_required()
def get_devices():
    logging.info("Fetching devices")
    current_user = get_jwt_identity()
    logging.info(f"User {current_user} fetching devices")
    try:
        devices = Device.query.all()
        logging.debug(f"Found {len(devices)} devices")
        return jsonify([{
            'id': device.id,
            'name': device.name,
            'ip_address': device.ip_address,
            'mac_address': device.mac_address,
            'status': device.status,
            'blocked': device.blocked,
            'last_seen': device.last_seen.isoformat() if device.last_seen else None,
            'data_usage': device.data_usage
        } for device in devices])
    except Exception as e:
        logging.error(f"Error fetching devices: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@main.route('/api/devices/<int:device_id>/toggle', methods=['POST'])
@jwt_required()
def toggle_device(device_id):
    current_user = get_jwt_identity()
    logging.info(f"User {current_user} toggling device {device_id}")
    try:
        device = Device.query.get_or_404(device_id)
        device.blocked = not device.blocked
        db.session.commit()
        
        device_data = {
            'id': device.id,
            'name': device.name,
            'ip_address': device.ip_address,
            'mac_address': device.mac_address,
            'status': device.status,
            'blocked': device.blocked,
            'last_seen': device.last_seen.isoformat() if device.last_seen else None,
            'data_usage': device.data_usage
        }
        
        emit('device_updated', device_data, broadcast=True, namespace='/')
        logging.info(f'Device {device_id} toggled. New blocked status: {device.blocked}')
        return jsonify({'success': True, 'blocked': device.blocked})
    except Exception as e:
        logging.error(f'Error toggling device {device_id}: {str(e)}')
        db.session.rollback()
        return jsonify({'error': 'Internal server error'}), 500

@main.route('/api/scan', methods=['POST'])
@jwt_required()
def scan():
    current_user = get_jwt_identity()
    logging.info(f"User {current_user} scanning for new devices")
    try:
        new_devices = scan_network()
        logging.debug(f"Scan returned {len(new_devices)} devices")
        for device_data in new_devices:
            existing_device = Device.query.filter_by(mac_address=device_data['mac_address']).first()
            if existing_device:
                logging.debug(f"Updating existing device: {existing_device.name}")
                existing_device.name = device_data['name']
                existing_device.ip_address = device_data['ip_address']
                existing_device.status = device_data['status']
                existing_device.last_seen = device_data['last_seen']
                existing_device.update_data_usage(random.randint(1000000, 10000000))
            else:
                logging.debug(f"Adding new device: {device_data['name']}")
                new_device = Device(
                    name=device_data['name'],
                    ip_address=device_data['ip_address'],
                    mac_address=device_data['mac_address'],
                    status=device_data['status'],
                    blocked=device_data['blocked'],
                    last_seen=device_data['last_seen']
                )
                db.session.add(new_device)
        db.session.commit()
        
        devices = Device.query.all()
        devices_data = [{
            'id': device.id,
            'name': device.name,
            'ip_address': device.ip_address,
            'mac_address': device.mac_address,
            'status': device.status,
            'blocked': device.blocked,
            'last_seen': device.last_seen.isoformat() if device.last_seen else None,
            'data_usage': device.data_usage
        } for device in devices]
        
        emit('devices_update', devices_data, broadcast=True, namespace='/')
        logging.info(f"Emitted 'devices_update' event with {len(devices)} devices")
        
        return jsonify({'success': True})
    except Exception as e:
        logging.error(f"Error during device scan: {str(e)}")
        db.session.rollback()
        return jsonify({'error': 'Internal server error'}), 500

@main.route('/network_usage')
@jwt_required()
def network_usage():
    try:
        current_user = get_jwt_identity()
        logging.info(f"User {current_user} accessing network usage page")
        
        devices = Device.query.all()
        
        for device in devices:
            device.total_usage = db.session.query(func.sum(NetworkUsage.data_used)).filter(NetworkUsage.device_id == device.id).scalar() or 0
        
        total_network_usage = sum(device.total_usage for device in devices)
        
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(days=1)
        hourly_usage = db.session.query(
            func.date_trunc('hour', NetworkUsage.timestamp).label('hour'),
            func.sum(NetworkUsage.data_used).label('usage')
        ).filter(NetworkUsage.timestamp.between(start_time, end_time)
        ).group_by('hour').order_by('hour').all()
        
        hourly_data = [{'hour': entry.hour.isoformat(), 'usage': entry.usage} for entry in hourly_usage]
        
        top_devices = sorted(devices, key=lambda x: x.total_usage, reverse=True)[:5]
        
        return render_template('network_usage.html',
                             devices=devices,
                             total_network_usage=total_network_usage,
                             hourly_data=hourly_data,
                             top_devices=top_devices)
    except Exception as e:
        logging.error(f"Error accessing network usage page: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@main.route('/api/network_usage')
@jwt_required()
def get_network_usage():
    try:
        current_user = get_jwt_identity()
        time_range = request.args.get('range', '24h')
        
        end_time = datetime.utcnow()
        if time_range == '7d':
            start_time = end_time - timedelta(days=7)
            interval = 'hour'
        elif time_range == '30d':
            start_time = end_time - timedelta(days=30)
            interval = 'day'
        else:
            start_time = end_time - timedelta(days=1)
            interval = 'hour'

        usage_data = db.session.query(
            func.date_trunc(interval, NetworkUsage.timestamp).label('interval'),
            func.sum(NetworkUsage.data_used).label('usage')
        ).filter(
            NetworkUsage.timestamp.between(start_time, end_time)
        ).group_by('interval').order_by('interval').all()

        total_usage = sum(entry.usage for entry in usage_data) if usage_data else 0
        peak_usage = max((entry.usage for entry in usage_data), default=0)
        peak_time = next(
            (entry.interval for entry in usage_data if entry.usage == peak_usage),
            None
        )

        if len(usage_data) > 1:
            first_half = sum(entry.usage for entry in usage_data[:len(usage_data)//2])
            second_half = sum(entry.usage for entry in usage_data[len(usage_data)//2:])
            trend = (second_half - first_half) / first_half if first_half > 0 else 0
        else:
            trend = 0

        previous_start = start_time - (end_time - start_time)
        previous_usage = db.session.query(
            func.sum(NetworkUsage.data_used)
        ).filter(
            NetworkUsage.timestamp.between(previous_start, start_time)
        ).scalar() or 0

        period_comparison = (
            ((total_usage - previous_usage) / previous_usage * 100)
            if previous_usage > 0 else 0
        )

        devices = Device.query.all()
        device_usage = []
        for device in devices:
            device_data = db.session.query(
                func.sum(NetworkUsage.data_used).label('total_usage')
            ).filter(
                NetworkUsage.device_id == device.id,
                NetworkUsage.timestamp.between(start_time, end_time)
            ).first()

            device_usage.append({
                'name': device.name,
                'usage': float(device_data.total_usage or 0) / (1024 * 1024)
            })

        response_data = {
            'labels': [entry.interval.isoformat() for entry in usage_data],
            'values': [float(entry.usage or 0) / (1024 * 1024) for entry in usage_data],
            'devices': sorted(device_usage, key=lambda x: x['usage'], reverse=True),
            'statistics': {
                'total_usage': float(total_usage) / (1024 * 1024),
                'peak_usage_time': peak_time.strftime('%Y-%m-%d %H:%M') if peak_time else None,
                'trend': trend,
                'period_comparison': period_comparison
            }
        }

        return jsonify(response_data)
    except Exception as e:
        logging.error(f"Error fetching network usage data: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@main.route('/admin')
@admin_required
def admin_dashboard():
    try:
        total_devices = Device.query.count()
        active_devices = Device.query.filter_by(status=True).count()
        blocked_devices = Device.query.filter_by(blocked=True).count()
        
        total_usage = db.session.query(func.sum(NetworkUsage.data_used)).scalar() or 0
        
        devices = Device.query.all()
        network_settings = NetworkSettings.query.all()
        
        return render_template('admin/dashboard.html',
                             total_devices=total_devices,
                             active_devices=active_devices,
                             blocked_devices=blocked_devices,
                             total_usage=total_usage,
                             devices=devices,
                             network_settings=network_settings)
    except Exception as e:
        logging.error(f"Error accessing admin dashboard: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@main.route('/api/admin/settings', methods=['POST'])
@admin_required
def add_network_setting():
    try:
        data = request.get_json()
        current_user_id = get_jwt_identity()
        
        setting = NetworkSettings(
            setting_name=data['name'],
            setting_value=data['value'],
            description=data.get('description', ''),
            modified_by=current_user_id
        )
        
        db.session.add(setting)
        db.session.commit()
        
        return jsonify({'success': True, 'setting_id': setting.id})
    except Exception as e:
        logging.error(f"Error adding network setting: {str(e)}")
        db.session.rollback()
        return jsonify({'error': 'Internal server error'}), 500

@main.route('/api/admin/settings/<int:setting_id>', methods=['PUT', 'DELETE'])
@admin_required
def manage_network_setting(setting_id):
    try:
        setting = NetworkSettings.query.get_or_404(setting_id)
        
        if request.method == 'DELETE':
            db.session.delete(setting)
            db.session.commit()
            return jsonify({'success': True})
            
        data = request.get_json()
        setting.setting_value = data['value']
        setting.description = data.get('description', setting.description)
        setting.modified_by = get_jwt_identity()
        
        db.session.commit()
        return jsonify({'success': True})
    except Exception as e:
        logging.error(f"Error managing network setting: {str(e)}")
        db.session.rollback()
        return jsonify({'error': 'Internal server error'}), 500

@main.route('/api/admin/devices/<int:device_id>', methods=['PUT'])
@admin_required
def update_device(device_id):
    try:
        device = Device.query.get_or_404(device_id)
        data = request.get_json()
        
        device.name = data.get('name', device.name)
        device.bandwidth_limit = data.get('bandwidth_limit', device.bandwidth_limit)
        device.notes = data.get('notes', device.notes)
        
        db.session.commit()
        
        device_data = {
            'id': device.id,
            'name': device.name,
            'ip_address': device.ip_address,
            'mac_address': device.mac_address,
            'status': device.status,
            'blocked': device.blocked,
            'bandwidth_limit': device.bandwidth_limit,
            'notes': device.notes,
            'last_seen': device.last_seen.isoformat() if device.last_seen else None,
            'data_usage': device.data_usage
        }
        
        emit('device_updated', device_data, broadcast=True, namespace='/')
        return jsonify({'success': True})
    except Exception as e:
        logging.error(f"Error updating device: {str(e)}")
        db.session.rollback()
        return jsonify({'error': 'Internal server error'}), 500

--------------------------------------------------

Directory: ./static/
--------------------------------------------------
File: ./static/css/custom.css
--------------------------------------------------
Contents of ./static/css/custom.css:
/* custom.css */

/* General Styles */
body {
    background-color: var(--bs-dark);
    color: var(--bs-light);
}

.container {
    padding-top: 20px;
}

/* Navbar */
.navbar {
    margin-bottom: 20px;
    background-color: var(--bs-gray-800) !important;
}

/* Table */
.table {
    background-color: var(--bs-gray-900);
    color: var(--bs-light);
}

.table thead th {
    background-color: var(--bs-gray-800);
    color: var(--bs-light);
    border-color: var(--bs-gray-700);
}

.table tbody tr:hover {
    background-color: var(--bs-gray-700);
}

/* Buttons */
.btn {
    min-width: 80px;
}

/* Loading Indicator */
#loading-indicator {
    color: var(--bs-primary);
}

/* Modal */
.modal-content {
    background-color: var(--bs-gray-800);
    color: var(--bs-light);
}

.modal-header, .modal-footer {
    border-color: var(--bs-gray-700);
}

/* Forms */
.form-control {
    background-color: var(--bs-gray-700);
    color: var(--bs-light);
    border-color: var(--bs-gray-600);
}

.form-control:focus {
    background-color: var(--bs-gray-600);
    color: var(--bs-light);
}

--------------------------------------------------

File: ./static/js/admin.js
--------------------------------------------------
Contents of ./static/js/admin.js:
// Admin Dashboard JavaScript

document.addEventListener('DOMContentLoaded', function() {
    // Initialize tooltips
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl)
    });

    // Network Settings
    const saveSettingBtn = document.getElementById('saveSettingBtn');
    if (saveSettingBtn) {
        saveSettingBtn.addEventListener('click', function() {
            const name = document.getElementById('settingName').value;
            const value = document.getElementById('settingValue').value;
            const description = document.getElementById('settingDescription').value;

            fetchWithAuth('/api/admin/settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name, value, description })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error saving setting');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error saving setting');
            });
        });
    }

    // Delete Setting
    document.querySelectorAll('.delete-setting').forEach(button => {
        button.addEventListener('click', function() {
            const settingId = this.dataset.settingId;
            if (confirm('Are you sure you want to delete this setting?')) {
                fetchWithAuth(`/api/admin/settings/${settingId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error deleting setting');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error deleting setting');
                });
            }
        });
    });

    // Edit Device
    document.querySelectorAll('.edit-device').forEach(button => {
        button.addEventListener('click', function() {
            const deviceId = this.dataset.deviceId;
            const row = this.closest('tr');
            
            document.getElementById('deviceId').value = deviceId;
            document.getElementById('deviceName').value = row.cells[0].textContent;
            document.getElementById('bandwidthLimit').value = row.cells[5].textContent.trim() === 'Unlimited' 
                ? 0 
                : parseInt(row.cells[5].textContent);
            document.getElementById('deviceNotes').value = row.cells[6].textContent;
        });
    });

    // Save Device Changes
    const saveDeviceBtn = document.getElementById('saveDeviceBtn');
    if (saveDeviceBtn) {
        saveDeviceBtn.addEventListener('click', function() {
            const deviceId = document.getElementById('deviceId').value;
            const name = document.getElementById('deviceName').value;
            const bandwidthLimit = parseInt(document.getElementById('bandwidthLimit').value);
            const notes = document.getElementById('deviceNotes').value;

            fetchWithAuth(`/api/admin/devices/${deviceId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    name, 
                    bandwidth_limit: bandwidthLimit,
                    notes 
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error updating device');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error updating device');
            });
        });
    }

    // Initialize Socket.IO for real-time updates
    const socket = io();
    
    socket.on('device_updated', function(device) {
        const row = document.querySelector(`tr[data-device-id="${device.id}"]`);
        if (row) {
            updateDeviceRow(row, device);
        }
    });

    function updateDeviceRow(row, device) {
        row.cells[0].textContent = device.name;
        row.cells[4].textContent = `${(device.data_usage / (1024 * 1024)).toFixed(2)} MB`;
        row.cells[5].textContent = device.bandwidth_limit === 0 ? 'Unlimited' : `${device.bandwidth_limit} Mbps`;
        row.cells[6].textContent = device.notes || '';
        
        const statusBadge = row.cells[3].querySelector('.badge');
        statusBadge.className = `badge bg-${device.status ? 'success' : 'danger'}`;
        statusBadge.textContent = device.status ? 'Online' : 'Offline';
        
        const toggleButton = row.querySelector('.toggle-device');
        toggleButton.className = `btn btn-sm btn-${device.blocked ? 'success' : 'danger'} toggle-device`;
        toggleButton.textContent = device.blocked ? 'Unblock' : 'Block';
    }
});

--------------------------------------------------

File: ./static/js/main.js
--------------------------------------------------
Contents of ./static/js/main.js:
let socket;
let networkUsageChart = null;
let deviceDistributionChart = null;

function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
}

function checkAdminAccess() {
    fetchWithAuth('/admin')
        .catch(error => {
            console.error('Error accessing admin page:', error);
            window.location.href = '/login';
        });
}

function fetchWithAuth(url, options = {}) {
    options.credentials = 'include';

    return fetch(url, options)
        .then(response => {
            console.log('Response status:', response.status);
            if (response.status === 401) {
                return fetch('/refresh', { 
                    method: 'POST',
                    credentials: 'include'
                })
                .then(refreshResponse => {
                    if (!refreshResponse.ok) {
                        window.location.href = '/login';
                        throw new Error('Token refresh failed');
                    }
                    return fetch(url, options);
                })
                .catch(error => {
                    console.error('Token refresh failed:', error);
                    window.location.href = '/login';
                    throw error;
                });
            }
            if (response.status === 403) {
                window.location.href = '/login';
                throw new Error('Access forbidden');
            }
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response;
        });
}

function loadDevices() {
    const deviceList = document.getElementById('device-list');
    if (!deviceList) return;
    
    showLoading();
    fetchWithAuth('/api/devices')
        .then(response => response.json())
        .then(devices => {
            refreshDeviceList(devices);
            hideLoading();
        })
        .catch(error => {
            console.error('Error fetching devices:', error);
            if (deviceList) {
                deviceList.innerHTML = '<tr><td colspan="7">Error loading devices. Please try again.</td></tr>';
            }
            hideLoading();
        });
}

function showLoading() {
    const loadingIndicator = document.getElementById('loading-indicator');
    if (loadingIndicator) {
        loadingIndicator.style.display = 'block';
    }
}

function hideLoading() {
    const loadingIndicator = document.getElementById('loading-indicator');
    if (loadingIndicator) {
        loadingIndicator.style.display = 'none';
    }
}

function showChartLoading() {
    const containers = document.querySelectorAll('.chart-container');
    containers.forEach(container => {
        container.innerHTML = '<div class="d-flex justify-content-center align-items-center" style="height: 300px;"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
    });
}

function showChartError(message) {
    const containers = document.querySelectorAll('.chart-container');
    containers.forEach(container => {
        container.innerHTML = `<div class="alert alert-danger">${message}</div>`;
    });
}

function updateDeviceInList(device) {
    const deviceRow = document.getElementById(`device-${device.id}`);
    if (deviceRow) {
        deviceRow.innerHTML = `
            <td>${device.name}</td>
            <td>${device.ip_address}</td>
            <td>${device.mac_address}</td>
            <td>${device.status ? 'Online' : 'Offline'}</td>
            <td>${device.last_seen}</td>
            <td>${(device.data_usage / (1024 * 1024)).toFixed(2)} MB</td>
            <td>
                <button class="btn ${device.blocked ? 'btn-success' : 'btn-danger'} btn-sm toggle-device" data-device-id="${device.id}">
                    ${device.blocked ? 'Unblock' : 'Block'}
                </button>
            </td>
        `;
    } else {
        refreshDeviceList([device]);
    }
}

function refreshDeviceList(devices) {
    const deviceList = document.getElementById('device-list');
    if (!deviceList) return;
    
    if (devices.length === 0) {
        deviceList.innerHTML = '<tr><td colspan="7">No devices found. Try scanning for new devices.</td></tr>';
    } else {
        deviceList.innerHTML = '';
        devices.forEach(device => {
            const row = document.createElement('tr');
            row.id = `device-${device.id}`;
            row.innerHTML = `
                <td>${device.name}</td>
                <td>${device.ip_address}</td>
                <td>${device.mac_address}</td>
                <td>${device.status ? 'Online' : 'Offline'}</td>
                <td>${device.last_seen}</td>
                <td>${(device.data_usage / (1024 * 1024)).toFixed(2)} MB</td>
                <td>
                    <button class="btn ${device.blocked ? 'btn-success' : 'btn-danger'} btn-sm toggle-device" data-device-id="${device.id}">
                        ${device.blocked ? 'Unblock' : 'Block'}
                    </button>
                </td>
            `;
            deviceList.appendChild(row);
        });
    }
}

function loadNetworkUsageData(timeRange = '24h') {
    console.log('Loading network usage data for range:', timeRange);
    showChartLoading();
    
    fetchWithAuth(`/api/network_usage?range=${timeRange}`)
        .then(response => response.json())
        .then(data => {
            console.log('Network usage data received:', data);
            if (data.error) {
                throw new Error(data.error);
            }
            if (!data.devices || !data.labels || !data.values) {
                throw new Error('Invalid data format received');
            }
            renderNetworkUsageChart(data);
            renderDeviceDistributionChart(data.devices);
            updateNetworkStats(data);
        })
        .catch(error => {
            console.error('Error fetching network usage data:', error);
            showChartError('Error loading network usage data. Please try again later.');
        });
}

function renderNetworkUsageChart(data) {
    const ctx = document.getElementById('networkUsageChart');
    if (!ctx) return;

    const chartData = {
        labels: data.labels,
        datasets: [{
            label: 'Network Usage (MB)',
            data: data.values,
            borderColor: 'rgb(75, 192, 192)',
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            tension: 0.1,
            fill: true
        }]
    };

    if (networkUsageChart) {
        networkUsageChart.destroy();
    }

    networkUsageChart = new Chart(ctx, {
        type: 'line',
        data: chartData,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            interaction: {
                intersect: false,
                mode: 'index'
            },
            scales: {
                x: {
                    type: 'time',
                    time: {
                        unit: 'hour',
                        displayFormats: {
                            hour: 'MMM d, HH:mm'
                        }
                    },
                    title: {
                        display: true,
                        text: 'Time'
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: 'Usage (MB)'
                    },
                    beginAtZero: true
                }
            },
            plugins: {
                zoom: {
                    zoom: {
                        wheel: {
                            enabled: true
                        },
                        pinch: {
                            enabled: true
                        },
                        mode: 'xy'
                    },
                    pan: {
                        enabled: true,
                        mode: 'xy'
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return `Usage: ${context.parsed.y.toFixed(2)} MB`;
                        }
                    }
                }
            }
        }
    });

    document.getElementById('resetZoom')?.addEventListener('click', function() {
        networkUsageChart.resetZoom();
    });
}

function renderDeviceDistributionChart(devices) {
    const ctx = document.getElementById('deviceDistributionChart');
    if (!ctx) return;

    const deviceData = devices.map(device => ({
        name: device.name,
        usage: device.usage
    }));

    const data = {
        labels: deviceData.map(d => d.name),
        datasets: [{
            data: deviceData.map(d => d.usage),
            backgroundColor: [
                'rgba(255, 99, 132, 0.8)',
                'rgba(54, 162, 235, 0.8)',
                'rgba(255, 206, 86, 0.8)',
                'rgba(75, 192, 192, 0.8)',
                'rgba(153, 102, 255, 0.8)'
            ]
        }]
    };

    if (deviceDistributionChart) {
        deviceDistributionChart.destroy();
    }

    deviceDistributionChart = new Chart(ctx, {
        type: 'pie',
        data: data,
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom'
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return `${context.label}: ${context.parsed.toFixed(2)} MB`;
                        }
                    }
                }
            }
        }
    });
}

function updateNetworkStats(data) {
    const stats = data.statistics;
    if (!stats) return;

    document.getElementById('totalUsage').textContent = `${stats.total_usage.toFixed(2)} MB`;
    document.getElementById('peakUsageTime').textContent = stats.peak_usage_time;
    
    const trendElement = document.getElementById('usageTrend');
    if (stats.trend > 0) {
        trendElement.innerHTML = '<span class="text-success">↑ Increasing</span>';
    } else if (stats.trend < 0) {
        trendElement.innerHTML = '<span class="text-danger">↓ Decreasing</span>';
    } else {
        trendElement.innerHTML = '<span class="text-warning">→ Stable</span>';
    }

    document.getElementById('periodComparison').textContent = 
        `${stats.period_comparison > 0 ? '+' : ''}${stats.period_comparison}% vs previous`;
}

function updateNetworkUsageChart(data) {
    if (!data || !data.labels || !data.values) return;
    
    networkUsageChart.data.labels = data.labels;
    networkUsageChart.data.datasets[0].data = data.values;
    networkUsageChart.update('none');
}

function updateDeviceDistributionChart(devices) {
    if (!devices || !devices.length) return;
    
    deviceDistributionChart.data.labels = devices.map(d => d.name);
    deviceDistributionChart.data.datasets[0].data = devices.map(d => d.usage);
    deviceDistributionChart.update('none');
}

function initializeTimeRangeButtons() {
    const buttons = document.querySelectorAll('.time-range-btn');
    buttons.forEach(button => {
        button.addEventListener('click', function() {
            buttons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            loadNetworkUsageData(this.dataset.range);
        });
    });
}

function initializeDeviceSort() {
    document.querySelectorAll('.sort-devices').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const sortBy = this.dataset.sort;
            const tbody = document.getElementById('deviceTableBody');
            const rows = Array.from(tbody.getElementsByTagName('tr'));

            rows.sort((a, b) => {
                let aVal = a.cells[getColumnIndex(sortBy)].textContent;
                let bVal = b.cells[getColumnIndex(sortBy)].textContent;

                if (sortBy === 'usage') {
                    aVal = parseFloat(aVal);
                    bVal = parseFloat(bVal);
                }

                if (aVal < bVal) return -1;
                if (aVal > bVal) return 1;
                return 0;
            });

            rows.forEach(row => tbody.appendChild(row));
        });
    });
}

function getColumnIndex(sortBy) {
    switch(sortBy) {
        case 'name': return 0;
        case 'usage': return 4;
        case 'last_seen': return 5;
        default: return 0;
    }
}

function toggleDevice(deviceId) {
    fetchWithAuth(`/api/devices/${deviceId}/toggle`, { method: 'POST' })
        .then(response => response.json())
        .then(result => {
            if (result.success) {
                console.log(`Device ${deviceId} toggled successfully`);
            } else {
                console.error('Error toggling device:', result.error);
            }
        })
        .catch(error => {
            console.error('Error toggling device:', error);
        });
}

function initializeSocket() {
    console.log('Initializing Socket.IO');
    const socketUrl = window.location.origin;
    console.log('Connecting to WebSocket URL:', socketUrl);

    socket = io(socketUrl, {
        transports: ['websocket'],
        auth: {
            token: getCookie('access_token_cookie')
        },
        reconnection: true,
        reconnectionAttempts: 5,
        reconnectionDelay: 1000
    });

    socket.on('connect', function() {
        console.log('Connected to WebSocket server');
    });

    socket.on('disconnect', function(reason) {
        console.log('Disconnected from WebSocket server:', reason);
    });

    socket.on('connect_error', (error) => {
        console.error('Socket connection error:', error);
        if (error.message === 'jwt expired') {
            fetch('/refresh', { 
                method: 'POST',
                credentials: 'include'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Token refresh failed');
                }
                socket.connect();
            })
            .catch(() => {
                window.location.href = '/login';
            });
        }
    });

    socket.on('device_updated', function(device) {
        console.log('Device update received:', device);
        updateDeviceInList(device);
    });

    socket.on('devices_update', function(devices) {
        console.log('Devices update received:', devices);
        refreshDeviceList(devices);
    });

    socket.on('network_usage_update', function(data) {
        console.log('Network usage update received:', data);
        if (networkUsageChart) {
            updateNetworkUsageChart(data);
        }
        if (deviceDistributionChart) {
            updateDeviceDistributionChart(data.devices);
        }
        updateNetworkStats(data);
    });
}

document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM Content Loaded');
    const path = window.location.pathname;
    const isProtectedPage = ['/devices', '/network_usage'].includes(path);

    if (isProtectedPage) {
        initializeSocket();
        if (path === '/devices') {
            loadDevices();
        } else if (path === '/network_usage') {
            loadNetworkUsageData('24h');
            initializeTimeRangeButtons();
            initializeDeviceSort();
        }
    }

    const deviceList = document.getElementById('device-list');
    const scanButton = document.getElementById('scan-button');

    if (scanButton) {
        scanButton.addEventListener('click', function() {
            showLoading();
            fetchWithAuth('/api/scan', { method: 'POST' })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        loadDevices();
                    } else {
                        console.error('Scan failed:', result.error);
                        if (deviceList) {
                            deviceList.innerHTML = '<tr><td colspan="7">Scan failed. Please try again.</td></tr>';
                        }
                    }
                    hideLoading();
                })
                .catch(error => {
                    console.error('Error during scan:', error);
                    if (deviceList) {
                        deviceList.innerHTML = '<tr><td colspan="7">Error during scan. Please try again.</td></tr>';
                    }
                    hideLoading();
                });
        });
    }

    if (deviceList) {
        deviceList.addEventListener('click', function(event) {
            if (event.target.classList.contains('toggle-device')) {
                const deviceId = event.target.getAttribute('data-device-id');
                toggleDevice(deviceId);
            }
        });
    }
});
--------------------------------------------------

Directory: ./templates/
--------------------------------------------------
File: ./templates/devices.html
--------------------------------------------------
Contents of ./templates/devices.html:
{% extends "base.html" %}

{% block content %}
<h2>Connected Devices</h2>
<button id="scan-button" class="btn btn-primary mb-3">Scan for new devices</button>
<div id="loading-indicator" class="text-center my-3" style="display: none;">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>IP Address</th>
            <th>MAC Address</th>
            <th>Status</th>
            <th>Last Seen</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="device-list">
        <!-- Device list will be populated by JavaScript -->
    </tbody>
</table>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="confirmModalLabel">Confirm Action</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="confirmModalBody">
        Are you sure you want to proceed?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="confirmModalYes">Yes</button>
      </div>
    </div>
  </div>
</div>
{% endblock %}

--------------------------------------------------

File: ./templates/index.html
--------------------------------------------------
Contents of ./templates/index.html:
{% extends "base.html" %}

{% block content %}
<h1>Welcome to Wi-Fi Network Manager</h1>
<p>Manage your network devices with ease.</p>
<a href="{{ url_for('main.login') }}" class="btn btn-primary">Login</a>
<a href="{{ url_for('main.register') }}" class="btn btn-secondary">Register</a>
{% endblock %}

--------------------------------------------------

File: ./templates/login.html
--------------------------------------------------
Contents of ./templates/login.html:
{% extends "base.html" %}

{% block content %}
<h2>Login</h2>
{% with messages = get_flashed_messages(with_categories=true) %}
  {% if messages %}
    {% for category, message in messages %}
      <div class="alert alert-{{ category }}">{{ message }}</div>
    {% endfor %}
  {% endif %}
{% endwith %}
<form action="{{ url_for('main.login') }}" method="post">
    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <input type="text" class="form-control" id="username" name="username" required>
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input type="password" class="form-control" id="password" name="password" required>
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</form>
{% endblock %}

--------------------------------------------------

File: ./templates/register.html
--------------------------------------------------
Contents of ./templates/register.html:
{% extends "base.html" %}

{% block content %}
<h2>Register</h2>
<form action="{{ url_for('main.register') }}" method="post">
    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <input type="text" class="form-control" id="username" name="username" required>
    </div>
    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <input type="email" class="form-control" id="email" name="email" required>
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input type="password" class="form-control" id="password" name="password" required>
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</form>
{% endblock %}

--------------------------------------------------

File: ./templates/network_usage.html
--------------------------------------------------
Contents of ./templates/network_usage.html:
{% extends "base.html" %}

{% block content %}
<h2>Network Usage Analytics</h2>

<div class="row mb-4">
    <div class="col-md-12">
        <div class="btn-group mb-3" role="group" aria-label="Time range selector">
            <button type="button" class="btn btn-secondary time-range-btn" data-range="24h">24 Hours</button>
            <button type="button" class="btn btn-secondary time-range-btn" data-range="7d">7 Days</button>
            <button type="button" class="btn btn-secondary time-range-btn" data-range="30d">30 Days</button>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-8">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Network Usage Over Time</h5>
                <div class="chart-container" style="position: relative; height:400px;">
                    <canvas id="networkUsageChart"></canvas>
                </div>
                <div class="text-center mt-2">
                    <button class="btn btn-sm btn-secondary" id="resetZoom">Reset Zoom</button>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Device Usage Distribution</h5>
                <canvas id="deviceDistributionChart"></canvas>
            </div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Network Statistics</h5>
                <div id="networkStats">
                    <div class="d-flex justify-content-between mb-2">
                        <span>Total Usage:</span>
                        <span class="text-info" id="totalUsage">{{ (total_network_usage / (1024 * 1024)) | round(2) }} MB</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Peak Usage Time:</span>
                        <span class="text-info" id="peakUsageTime">Loading...</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Current Trend:</span>
                        <span id="usageTrend">
                            <span class="text-success">↑ Increasing</span>
                        </span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>Period Comparison:</span>
                        <span class="text-info" id="periodComparison">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Top Devices</h5>
                <div class="list-group">
                    {% for device in top_devices %}
                    <div class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="mb-0">{{ device.name }}</h6>
                            <small class="text-muted">{{ device.ip_address }}</small>
                        </div>
                        <span class="badge bg-primary rounded-pill">
                            {{ (device.total_usage / (1024 * 1024)) | round(2) }} MB
                        </span>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title d-flex justify-content-between align-items-center">
                    Device Usage Details
                    <div class="btn-group">
                        <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                            Sort By
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item sort-devices" href="#" data-sort="name">Name</a></li>
                            <li><a class="dropdown-item sort-devices" href="#" data-sort="usage">Usage</a></li>
                            <li><a class="dropdown-item sort-devices" href="#" data-sort="last_seen">Last Seen</a></li>
                        </ul>
                    </div>
                </h5>
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Device Name</th>
                                <th>IP Address</th>
                                <th>MAC Address</th>
                                <th>Status</th>
                                <th>Total Usage</th>
                                <th>Last Seen</th>
                            </tr>
                        </thead>
                        <tbody id="deviceTableBody">
                            {% for device in devices %}
                            <tr>
                                <td>{{ device.name }}</td>
                                <td>{{ device.ip_address }}</td>
                                <td>{{ device.mac_address }}</td>
                                <td>
                                    <span class="badge bg-{{ device.status and 'success' or 'danger' }}">
                                        {{ device.status and 'Online' or 'Offline' }}
                                    </span>
                                </td>
                                <td>{{ (device.total_usage / (1024 * 1024)) | round(2) }} MB</td>
                                <td>{{ device.last_seen.strftime('%Y-%m-%d %H:%M:%S') if device.last_seen else 'Never' }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
<script src="https://cdn.jsdelivr.net/npm/date-fns"></script>
{% endblock %}

--------------------------------------------------

File: ./templates/base.html
--------------------------------------------------
Contents of ./templates/base.html:
<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wi-Fi Network Manager</title>
    <link rel="stylesheet" href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/custom.css') }}">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="{{ url_for('main.index') }}">Wi-Fi Network Manager</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('main.index') }}">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('main.devices') }}">Devices</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('main.network_usage') }}">Network Usage</a>
                    </li>
                    {% if current_user and current_user.is_admin %}
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('main.admin_dashboard') }}">Admin Dashboard</a>
                    </li>
                    {% endif %}
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('main.logout') }}">Logout</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        {% block content %}{% endblock %}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.min.js" integrity="sha512-Xm9qbB6Pu06k3PUwPj785dyTl6oHxgsv9nHp7ej7nCpAqGZT3OZpsELuCYX05DdonFpTlBpXMOxjavIAIUwr0w==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
    {% if request.endpoint == 'main.admin_dashboard' %}
    <script src="{{ url_for('static', filename='js/admin.js') }}"></script>
    {% endif %}
</body>
</html>

--------------------------------------------------


Replit Repository Structure and File Contents:
==================================================

Directory: ./
--------------------------------------------------
File: ./generated-icon.png
--------------------------------------------------
Could not read file: ./generated-icon.png. Error: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
--------------------------------------------------

File: ./main.py
--------------------------------------------------
Contents of ./main.py:
from app import app

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)

--------------------------------------------------

File: ./generate_structure.py
--------------------------------------------------
Contents of ./generate_structure.py:
import os

# Output file
OUTPUT_FILE = "replit_repo_structure_and_content.txt"

# Folders and files to include (based on your screenshot)
INCLUDED_ITEMS = {
    "app.py", "generated-icon.png", "main.py", "models.py", 
    "network_scanner.py", "routes.py", "static", "templates"
}

# Function to write repo structure and file contents
def write_repo_structure():
    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write("Replit Repository Structure and File Contents:\n")
        f.write("=" * 50 + "\n\n")

        # Walk through the directory tree
        for root, dirs, files in os.walk("."):
            # Remove the .git directory from the walk
            dirs[:] = [d for d in dirs if d != ".git"]
            # Only include folders and files that match the specified items
            dirs[:] = [d for d in dirs if d in INCLUDED_ITEMS or d in {"css", "js"}]  # Include css, js subdirectories
            files = [file for file in files if file.endswith(('.py', '.html', '.css', '.js', '.png'))]  # Include relevant file types

            # Write the current directory if it's in the included items
            if os.path.basename(root) in INCLUDED_ITEMS or root == ".":
                f.write(f"Directory: {root}/\n")
                f.write("-" * 50 + "\n")

            # Write each file in the current directory
            for file in files:
                file_path = os.path.join(root, file)
                f.write(f"File: {file_path}\n")
                f.write("-" * 50 + "\n")

                try:
                    # Read the contents of the file
                    with open(file_path, "r", encoding="utf-8") as content_file:
                        content = content_file.read()
                        f.write(f"Contents of {file_path}:\n")
                        f.write(content + "\n")
                except Exception as e:
                    f.write(f"Could not read file: {file_path}. Error: {e}\n")

                f.write("-" * 50 + "\n\n")

# Execute the function to document the current repo
if __name__ == "__main__":
    write_repo_structure()
    print(f"Repository structure and content have been written to {OUTPUT_FILE}")

--------------------------------------------------

File: ./network_scanner.py
--------------------------------------------------
Contents of ./network_scanner.py:
import random
from datetime import datetime, timedelta

def generate_mac_address():
    """Generate a random MAC address."""
    return ':'.join(['{:02x}'.format(random.randint(0x00, 0xff)) for _ in range(6)])

def generate_ip_address():
    """Generate a random IP address within a private IP range."""
    return f"192.168.1.{random.randint(2, 254)}"

def generate_device_name():
    """Generate a random device name."""
    device_types = ['Laptop', 'Smartphone', 'Tablet', 'Smart TV', 'Printer', 'Camera']
    return f"{random.choice(device_types)}-{random.randint(1000, 9999)}"

def scan_network():
    """Simulate network scanning by generating a list of devices."""
    devices = []
    for _ in range(random.randint(5, 15)):
        device = {
            'name': generate_device_name(),
            'ip_address': generate_ip_address(),
            'mac_address': generate_mac_address(),
            'status': random.choice([True, False]),
            'blocked': False,
            'last_seen': datetime.utcnow() - timedelta(minutes=random.randint(0, 60))
        }
        devices.append(device)
    return devices

--------------------------------------------------

File: ./models.py
--------------------------------------------------
Contents of ./models.py:
from app import db
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(256))

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

class Device(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)
    ip_address = db.Column(db.String(45), nullable=False, index=True)
    mac_address = db.Column(db.String(17), unique=True, nullable=False, index=True)
    status = db.Column(db.Boolean, default=True)
    blocked = db.Column(db.Boolean, default=False)
    last_seen = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

--------------------------------------------------

File: ./app.py
--------------------------------------------------
Contents of ./app.py:
import os
from flask import Flask, render_template
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.orm import DeclarativeBase
from flask_jwt_extended import JWTManager, verify_jwt_in_request, get_jwt_identity
from flask_migrate import Migrate
from flask_socketio import SocketIO
from flask_cors import CORS
import logging

class Base(DeclarativeBase):
    pass

db = SQLAlchemy(model_class=Base)
app = Flask(__name__)
CORS(app, supports_credentials=True)
migrate = Migrate(app, db)

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# Setup secret key and database
app.secret_key = os.environ.get("FLASK_SECRET_KEY") or "a secret key"
app.config["SQLALCHEMY_DATABASE_URI"] = os.environ.get("DATABASE_URL")
app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {
    "pool_recycle": 300,
    "pool_pre_ping": True,
}

# Setup JWT
app.config["JWT_SECRET_KEY"] = os.environ.get("FLASK_SECRET_KEY") or "jwt secret key"
app.config["JWT_TOKEN_LOCATION"] = ["cookies"]
app.config["JWT_COOKIE_SECURE"] = False  # Set to True in production with HTTPS
app.config["JWT_COOKIE_CSRF_PROTECT"] = False  # Set to True and implement CSRF protection in production
jwt = JWTManager(app)

db.init_app(app)

# Initialize SocketIO with CORS allowed
socketio = SocketIO(app, cors_allowed_origins="*", async_mode='eventlet', logger=True, engineio_logger=True)

with app.app_context():
    import models
    db.create_all()

from routes import *

@app.context_processor
def inject_logged_in():
    try:
        verify_jwt_in_request(optional=True)
        user_id = get_jwt_identity()
        return {'logged_in': bool(user_id)}
    except Exception as e:
        app.logger.error(f"Error in context processor: {str(e)}")
        return {'logged_in': False}

@app.errorhandler(404)
def not_found_error(error):
    app.logger.error(f"404 error: {error}")
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    app.logger.error(f"500 error: {error}")
    db.session.rollback()
    return render_template('500.html'), 500

@socketio.on_error()
def error_handler(e):
    app.logger.error(f"SocketIO error: {str(e)}")

if __name__ == "__main__":
    socketio.run(app, host="0.0.0.0", port=5000, debug=True)

--------------------------------------------------

File: ./routes.py
--------------------------------------------------
Contents of ./routes.py:
from flask import render_template, request, jsonify, redirect, url_for, flash
from flask_jwt_extended import create_access_token, jwt_required, get_jwt_identity, set_access_cookies, verify_jwt_in_request
from app import app, db, socketio
from models import User, Device
from network_scanner import scan_network
import logging
from datetime import datetime

logging.basicConfig(level=logging.DEBUG)

@app.route('/')
def index():
    logging.info("Accessing index route")
    return render_template('index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    logging.info("Accessing register route")
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']

        try:
            user = User(username=username, email=email)
            user.set_password(password)
            db.session.add(user)
            db.session.commit()
            logging.info(f"User {username} registered successfully")
            return redirect(url_for('login'))
        except Exception as e:
            logging.error(f"Error during registration: {str(e)}")
            db.session.rollback()
            flash('Registration failed. Please try again.', 'error')

    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    logging.info("Accessing login route")
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        user = User.query.filter_by(username=username).first()
        if user and user.check_password(password):
            access_token = create_access_token(identity=user.id)
            response = redirect(url_for('devices'))
            set_access_cookies(response, access_token)
            logging.info(f"User {username} logged in successfully")
            return response
        else:
            logging.warning(f"Failed login attempt for user {username}")
            flash('Invalid username or password', 'error')

    return render_template('login.html')

@app.route('/devices')
@jwt_required()
def devices():
    logging.info("Accessing devices route")
    current_user_id = get_jwt_identity()
    return render_template('devices.html')

@app.route('/api/devices', methods=['GET'])
@jwt_required()
def get_devices():
    logging.info("Fetching devices")
    try:
        devices = Device.query.all()
        logging.debug(f"Found {len(devices)} devices")
        return jsonify([{
            'id': device.id,
            'name': device.name,
            'ip_address': device.ip_address,
            'mac_address': device.mac_address,
            'status': device.status,
            'blocked': device.blocked,
            'last_seen': device.last_seen.isoformat() if device.last_seen else None
        } for device in devices])
    except Exception as e:
        logging.error(f"Error fetching devices: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/devices/<int:device_id>/toggle', methods=['POST'])
@jwt_required()
def toggle_device(device_id):
    try:
        device = Device.query.get_or_404(device_id)
        device.blocked = not device.blocked
        db.session.commit()
        
        # Emit WebSocket event
        socketio.emit('device_updated', {
            'id': device.id,
            'name': device.name,
            'ip_address': device.ip_address,
            'mac_address': device.mac_address,
            'status': device.status,
            'blocked': device.blocked,
            'last_seen': device.last_seen.isoformat() if device.last_seen else None
        }, broadcast=True)
        
        logging.info(f'Device {device_id} toggled via HTTP. New blocked status: {device.blocked}')
        return jsonify({'success': True, 'blocked': device.blocked})
    except Exception as e:
        logging.error(f'Error toggling device {device_id}: {str(e)}')
        db.session.rollback()
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/scan', methods=['POST'])
@jwt_required()
def scan():
    logging.info("Scanning for new devices")
    try:
        new_devices = scan_network()
        logging.debug(f"Scan returned {len(new_devices)} devices")
        for device_data in new_devices:
            existing_device = Device.query.filter_by(mac_address=device_data['mac_address']).first()
            if existing_device:
                logging.debug(f"Updating existing device: {existing_device.name}")
                existing_device.name = device_data['name']
                existing_device.ip_address = device_data['ip_address']
                existing_device.status = device_data['status']
                existing_device.last_seen = device_data['last_seen']
            else:
                logging.debug(f"Adding new device: {device_data['name']}")
                new_device = Device(
                    name=device_data['name'],
                    ip_address=device_data['ip_address'],
                    mac_address=device_data['mac_address'],
                    status=device_data['status'],
                    blocked=device_data['blocked'],
                    last_seen=device_data['last_seen']
                )
                db.session.add(new_device)
        db.session.commit()
        
        # Emit a WebSocket event to notify clients about the new scan results
        devices = Device.query.all()
        devices_data = [{
            'id': device.id,
            'name': device.name,
            'ip_address': device.ip_address,
            'mac_address': device.mac_address,
            'status': device.status,
            'blocked': device.blocked,
            'last_seen': device.last_seen.isoformat() if device.last_seen else None
        } for device in devices]
        socketio.emit('devices_update', devices_data, namespace='/')
        logging.info(f"Emitted 'devices_update' event with {len(devices)} devices")
        
        return jsonify({'success': True})
    except Exception as e:
        logging.error(f"Error during device scan: {str(e)}")
        db.session.rollback()
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/logout')
def logout():
    logging.info("User logged out")
    response = redirect(url_for('login'))
    # Unset JWT cookies
    response.delete_cookie('access_token_cookie')
    return response

@app.errorhandler(404)
def not_found_error(error):
    logging.error(f"404 error: {error}")
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    logging.error(f"500 error: {error}")
    db.session.rollback()
    return render_template('500.html'), 500

@socketio.on('connect')
def handle_connect():
    try:
        verify_jwt_in_request()
        user_id = get_jwt_identity()
        logging.info(f'User {user_id} connected via WebSocket')
    except Exception as e:
        logging.error(f'Unauthenticated user attempted to connect: {str(e)}')
        return False  # Disconnects the client

@socketio.on('disconnect')
def handle_disconnect():
    logging.info('Client disconnected from WebSocket')

@socketio.on('toggle_device')
def handle_toggle_device(data):
    try:
        verify_jwt_in_request()
        device_id = data.get('device_id')
        device = Device.query.get_or_404(device_id)
        device.blocked = not device.blocked
        db.session.commit()
        
        # Emit an event to all connected clients
        socketio.emit('device_updated', {
            'id': device.id,
            'name': device.name,
            'ip_address': device.ip_address,
            'mac_address': device.mac_address,
            'status': device.status,
            'blocked': device.blocked,
            'last_seen': device.last_seen.isoformat() if device.last_seen else None
        }, broadcast=True)
        
        logging.info(f'Device {device_id} toggled. New blocked status: {device.blocked}')
    except Exception as e:
        logging.error(f'Error handling toggle_device: {str(e)}')
        socketio.emit('error', {'message': 'Unauthorized or invalid request'})
--------------------------------------------------

Directory: ./static/
--------------------------------------------------
File: ./static/css/custom.css
--------------------------------------------------
Contents of ./static/css/custom.css:
/* custom.css */

/* General Styles */
body {
    background-color: var(--bs-dark);
    color: var(--bs-light);
}

.container {
    padding-top: 20px;
}

/* Navbar */
.navbar {
    margin-bottom: 20px;
    background-color: var(--bs-gray-800) !important;
}

/* Table */
.table {
    background-color: var(--bs-gray-900);
    color: var(--bs-light);
}

.table thead th {
    background-color: var(--bs-gray-800);
    color: var(--bs-light);
    border-color: var(--bs-gray-700);
}

.table tbody tr:hover {
    background-color: var(--bs-gray-700);
}

/* Buttons */
.btn {
    min-width: 80px;
}

/* Loading Indicator */
#loading-indicator {
    color: var(--bs-primary);
}

/* Modal */
.modal-content {
    background-color: var(--bs-gray-800);
    color: var(--bs-light);
}

.modal-header, .modal-footer {
    border-color: var(--bs-gray-700);
}

/* Forms */
.form-control {
    background-color: var(--bs-gray-700);
    color: var(--bs-light);
    border-color: var(--bs-gray-600);
}

.form-control:focus {
    background-color: var(--bs-gray-600);
    color: var(--bs-light);
}

--------------------------------------------------

File: ./static/js/main.js
--------------------------------------------------
Contents of ./static/js/main.js:
document.addEventListener('DOMContentLoaded', function() {
    const deviceList = document.getElementById('device-list');
    const scanButton = document.getElementById('scan-button');
    const loadingIndicator = document.getElementById('loading-indicator');

    console.log('DOM Content Loaded');

    // Initialize Socket.IO with explicit configuration
    let socket;
    try {
        socket = io({
            withCredentials: true
        });
        console.log('Socket.IO initialized');
    } catch (error) {
        console.error('Error initializing Socket.IO:', error);
    }

    if (socket) {
        socket.on('connect', function() {
            console.log('Connected to WebSocket server');
        });

        socket.on('disconnect', function() {
            console.log('Disconnected from WebSocket server');
        });

        socket.on('device_updated', function(device) {
            console.log('Device update received:', device);
            updateDeviceInList(device);
        });

        socket.on('error', function(error) {
            console.error('WebSocket error:', error);
        });
    }

    function handleUnauthorized() {
        console.log('Unauthorized access, redirecting to login');
        window.location.href = '/login';
    }

    function showLoading(show) {
        loadingIndicator.style.display = show ? 'block' : 'none';
    }

    function updateDeviceInList(device) {
        console.log('Updating device in list:', device);
        const row = document.querySelector(`#device-list tr[data-device-id="${device.id}"]`);
        if (row) {
            const lastSeen = device.last_seen ? new Date(device.last_seen).toLocaleString() : 'N/A';
            row.innerHTML = `
                <td>${device.name}</td>
                <td>${device.ip_address}</td>
                <td>${device.mac_address}</td>
                <td>${device.status ? 'Online' : 'Offline'}</td>
                <td>${lastSeen}</td>
                <td>
                    <button class="btn btn-sm ${device.blocked ? 'btn-danger' : 'btn-success'}" onclick="toggleDevice(${device.id}, '${device.name}', ${device.blocked})">
                        ${device.blocked ? 'Unblock' : 'Block'}
                    </button>
                </td>
            `;
        } else {
            console.log('Device not found in list, reloading all devices');
            loadDevices();
        }
    }

    if (deviceList) {
        console.log('Device list found, loading devices');

        function loadDevices() {
            showLoading(true);
            fetch('/api/devices', {
                method: 'GET',
                credentials: 'same-origin'
            })
            .then(response => {
                console.log('Response status:', response.status);
                if (response.status === 401) {
                    handleUnauthorized();
                    return;
                }
                return response.json();
            })
            .then(devices => {
                showLoading(false);
                if (devices) {
                    console.log('Devices loaded:', devices);
                    refreshDeviceList(devices);
                }
            })
            .catch(error => {
                showLoading(false);
                console.error('Error fetching devices:', error);
                alert('Failed to load devices. Please try again.');
            });
        }

        loadDevices();

        window.toggleDevice = function(deviceId, deviceName, isBlocked) {
            const action = isBlocked ? 'unblock' : 'block';
            const modalBody = document.getElementById('confirmModalBody');
            modalBody.textContent = `Are you sure you want to ${action} the device "${deviceName}"?`;

            const confirmYes = document.getElementById('confirmModalYes');
            confirmYes.onclick = function() {
                if (socket && socket.connected) {
                    socket.emit('toggle_device', { device_id: deviceId });
                } else {
                    console.error('WebSocket not connected. Falling back to HTTP request.');
                    executeToggleDevice(deviceId);
                }
                const modal = bootstrap.Modal.getInstance(document.getElementById('confirmModal'));
                modal.hide();
            };

            const modal = new bootstrap.Modal(document.getElementById('confirmModal'));
            modal.show();
        };

        function executeToggleDevice(deviceId) {
            showLoading(true);
            fetch(`/api/devices/${deviceId}/toggle`, {
                method: 'POST',
                credentials: 'same-origin'
            })
            .then(response => {
                console.log('Toggle device response status:', response.status);
                if (response.status === 401) {
                    handleUnauthorized();
                    return;
                }
                return response.json();
            })
            .then(data => {
                showLoading(false);
                if (data && data.success) {
                    console.log('Device toggled successfully');
                } else {
                    throw new Error('Failed to toggle device status');
                }
            })
            .catch(error => {
                showLoading(false);
                console.error('Error toggling device:', error);
                alert(error.message || 'An error occurred. Please try again.');
            });
        }

        if (scanButton) {
            scanButton.addEventListener('click', function() {
                console.log('Scan button clicked');
                showLoading(true);
                fetch('/api/scan', {
                    method: 'POST',
                    credentials: 'same-origin'
                })
                .then(response => {
                    console.log('Scan response status:', response.status);
                    if (response.status === 401) {
                        handleUnauthorized();
                        return;
                    }
                    return response.json();
                })
                .then(data => {
                    showLoading(false);
                    if (data && data.success) {
                        console.log('Scan completed successfully');
                        loadDevices();
                    } else {
                        throw new Error('Failed to scan for new devices');
                    }
                })
                .catch(error => {
                    showLoading(false);
                    console.error('Error scanning devices:', error);
                    alert(error.message || 'An error occurred while scanning. Please try again.');
                });
            });
        }
    }
});

function refreshDeviceList(devices) {
    const deviceList = document.getElementById('device-list');
    deviceList.innerHTML = '';
    devices.forEach(device => {
        const row = document.createElement('tr');
        row.setAttribute('data-device-id', device.id);
        const lastSeen = device.last_seen ? new Date(device.last_seen).toLocaleString() : 'N/A';
        row.innerHTML = `
            <td>${device.name}</td>
            <td>${device.ip_address}</td>
            <td>${device.mac_address}</td>
            <td>${device.status ? 'Online' : 'Offline'}</td>
            <td>${lastSeen}</td>
            <td>
                <button class="btn btn-sm ${device.blocked ? 'btn-danger' : 'btn-success'}" onclick="toggleDevice(${device.id}, '${device.name}', ${device.blocked})">
                    ${device.blocked ? 'Unblock' : 'Block'}
                </button>
            </td>
        `;
        deviceList.appendChild(row);
    });
}

--------------------------------------------------

Directory: ./templates/
--------------------------------------------------
File: ./templates/index.html
--------------------------------------------------
Contents of ./templates/index.html:
{% extends "base.html" %}

{% block content %}
<h1>Welcome to Wi-Fi Network Manager</h1>
<p>Manage your network devices with ease.</p>
<a href="{{ url_for('login') }}" class="btn btn-primary">Login</a>
<a href="{{ url_for('register') }}" class="btn btn-secondary">Register</a>
{% endblock %}

--------------------------------------------------

File: ./templates/register.html
--------------------------------------------------
Contents of ./templates/register.html:
{% extends "base.html" %}

{% block content %}
<h2>Register</h2>
<form action="{{ url_for('register') }}" method="post">
    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <input type="text" class="form-control" id="username" name="username" required>
    </div>
    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <input type="email" class="form-control" id="email" name="email" required>
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input type="password" class="form-control" id="password" name="password" required>
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</form>
{% endblock %}

--------------------------------------------------

File: ./templates/login.html
--------------------------------------------------
Contents of ./templates/login.html:
{% extends "base.html" %}

{% block content %}
<h2>Login</h2>
{% with messages = get_flashed_messages(with_categories=true) %}
  {% if messages %}
    {% for category, message in messages %}
      <div class="alert alert-{{ category }}">{{ message }}</div>
    {% endfor %}
  {% endif %}
{% endwith %}
<form action="{{ url_for('login') }}" method="post">
    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <input type="text" class="form-control" id="username" name="username" required>
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input type="password" class="form-control" id="password" name="password" required>
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</form>
{% endblock %}

--------------------------------------------------

File: ./templates/devices.html
--------------------------------------------------
Contents of ./templates/devices.html:
{% extends "base.html" %}

{% block content %}
<h2>Connected Devices</h2>
<button id="scan-button" class="btn btn-primary mb-3">Scan for new devices</button>
<div id="loading-indicator" class="text-center my-3" style="display: none;">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>IP Address</th>
            <th>MAC Address</th>
            <th>Status</th>
            <th>Last Seen</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="device-list">
        <!-- Device list will be populated by JavaScript -->
    </tbody>
</table>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="confirmModalLabel">Confirm Action</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="confirmModalBody">
        Are you sure you want to proceed?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="confirmModalYes">Yes</button>
      </div>
    </div>
  </div>
</div>
{% endblock %}

--------------------------------------------------

File: ./templates/base.html
--------------------------------------------------
Contents of ./templates/base.html:
<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wi-Fi Network Manager</title>
    <link rel="stylesheet" href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/custom.css') }}">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="/">Wi-Fi Network Manager</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('index') }}">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('devices') }}">Devices</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        {% block content %}{% endblock %}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.min.js" integrity="sha512-Xm9qbB6Pu06k3PUwPj785dyTl6oHxgsv9nHp7ej7nCpAqGZT3OZpsELuCYX05DdonFpTlBpXMOxjavIAIUwr0w==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>

--------------------------------------------------


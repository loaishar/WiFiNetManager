Replit Repository Structure and File Contents:
==================================================

Directory: ./
--------------------------------------------------
File: ./generated-icon.png
--------------------------------------------------
Could not read file: ./generated-icon.png. Error: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
--------------------------------------------------

File: ./extensions.py
--------------------------------------------------
Contents of ./extensions.py:
from flask_sqlalchemy import SQLAlchemy
from flask_jwt_extended import JWTManager
from flask_socketio import SocketIO
from flask_cors import CORS

db = SQLAlchemy()
jwt = JWTManager()
socketio = SocketIO(cors_allowed_origins="*", async_mode='eventlet')
cors = CORS()

--------------------------------------------------

File: ./generate_structure.py
--------------------------------------------------
Contents of ./generate_structure.py:
import os

# Output file
OUTPUT_FILE = "replit_repo_structure_and_content.txt"

# Folders and files to include (based on your screenshot)
INCLUDED_ITEMS = {
    "app.py", "extensions.py", "generate_structure.py", "generated-icon.png",
    "main.py", "models.py", "network_scanner.py", "routes.py", "static",
    "templates"
}


# Function to write repo structure and file contents
def write_repo_structure():
    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write("Replit Repository Structure and File Contents:\n")
        f.write("=" * 50 + "\n\n")

        # Walk through the directory tree
        for root, dirs, files in os.walk("."):
            # Remove the .git directory from the walk
            dirs[:] = [d for d in dirs if d != ".git"]
            # Only include folders and files that match the specified items or subdirectories like 'css' and 'js'
            dirs[:] = [
                d for d in dirs if d in INCLUDED_ITEMS or d in {"css", "js"}
            ]  # Include css, js subdirectories
            files = [
                file for file in files
                if file.endswith(('.py', '.html', '.css', '.js',
                                  '.png')) and file != "list_users.py"
            ]  # Exclude list_users.py

            # Write the current directory if it's in the included items
            if os.path.basename(root) in INCLUDED_ITEMS or root == ".":
                f.write(f"Directory: {root}/\n")
                f.write("-" * 50 + "\n")

            # Write each file in the current directory
            for file in files:
                file_path = os.path.join(root, file)
                f.write(f"File: {file_path}\n")
                f.write("-" * 50 + "\n")

                try:
                    # Read the contents of the file
                    with open(file_path, "r",
                              encoding="utf-8") as content_file:
                        content = content_file.read()
                        f.write(f"Contents of {file_path}:\n")
                        f.write(content + "\n")
                except Exception as e:
                    f.write(f"Could not read file: {file_path}. Error: {e}\n")

                f.write("-" * 50 + "\n\n")


# Execute the function to document the current repo
if __name__ == "__main__":
    write_repo_structure()
    print(
        f"Repository structure and content have been written to {OUTPUT_FILE}")

--------------------------------------------------

File: ./models.py
--------------------------------------------------
Contents of ./models.py:
from extensions import db
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime
import logging

class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(256))
    is_admin = db.Column(db.Boolean, default=False, nullable=False)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

class Device(db.Model):
    __tablename__ = 'devices'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)
    ip_address = db.Column(db.String(45), nullable=False, index=True)
    mac_address = db.Column(db.String(17), unique=True, nullable=False, index=True)
    status = db.Column(db.Boolean, default=True)
    blocked = db.Column(db.Boolean, default=False)
    last_seen = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    bandwidth_limit = db.Column(db.Integer, default=0)  # Bandwidth limit in Mbps (0 = unlimited)
    notes = db.Column(db.Text, nullable=True)  # Admin notes about the device

class NetworkUsage(db.Model):
    __tablename__ = 'network_usage'
    id = db.Column(db.Integer, primary_key=True)
    device_id = db.Column(db.Integer, db.ForeignKey('devices.id'), nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    data_used = db.Column(db.BigInteger)  # Data used in bytes

    device = db.relationship('Device', backref=db.backref('usage_history', lazy='dynamic'))

class TotalNetworkUsage(db.Model):
    __tablename__ = 'total_network_usage'
    id = db.Column(db.Integer, primary_key=True)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    bytes_sent = db.Column(db.BigInteger)
    bytes_recv = db.Column(db.BigInteger)

class NetworkSettings(db.Model):
    __tablename__ = 'network_settings'
    id = db.Column(db.Integer, primary_key=True)
    setting_name = db.Column(db.String(64), unique=True, nullable=False)
    setting_value = db.Column(db.String(256))
    description = db.Column(db.Text)
    last_modified = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    modified_by = db.Column(db.Integer, db.ForeignKey('users.id'))

--------------------------------------------------

File: ./main.py
--------------------------------------------------
Contents of ./main.py:
from app import create_app
from extensions import socketio

app = create_app()

if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', port=5000, debug=True)

--------------------------------------------------

File: ./routes.py
--------------------------------------------------
Contents of ./routes.py:
from flask import Blueprint, render_template, request, jsonify, redirect, url_for, flash, make_response, current_app, g
from flask_jwt_extended import (
    create_access_token, create_refresh_token, jwt_required, get_jwt_identity,
    set_access_cookies, set_refresh_cookies, unset_jwt_cookies, get_jwt,
    verify_jwt_in_request
)
from extensions import db, jwt, socketio
from models import User, Device, NetworkUsage, NetworkSettings, TotalNetworkUsage
from network_scanner import scan_network, get_total_network_usage
import logging
from datetime import datetime, timedelta
from flask_socketio import emit
from sqlalchemy import func, desc
import eventlet
from functools import wraps

main = Blueprint('main', __name__)

logging.basicConfig(level=logging.DEBUG)

def admin_required(fn):
    @wraps(fn)
    def wrapper(*args, **kwargs):
        try:
            verify_jwt_in_request()
            current_user_id = get_jwt_identity()
            user = User.query.get(current_user_id)
            if not user or not user.is_admin:
                return redirect(url_for('main.login'))
            return fn(*args, **kwargs)
        except Exception as e:
            logging.error(f"Admin access error: {str(e)}")
            return redirect(url_for('main.login'))
    return wrapper

@main.before_request
def load_logged_in_user():
    try:
        verify_jwt_in_request(optional=True)
        claims = get_jwt()
        if claims:
            g.user = {
                'id': get_jwt_identity(),
                'is_admin': claims.get('is_admin', False)
            }
        else:
            g.user = None
    except Exception:
        g.user = None

@main.route('/')
def index():
    logging.info("Accessing index route")
    return render_template('index.html')

@main.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']

        try:
            is_admin = User.query.count() == 0
            user = User(username=username, email=email, is_admin=is_admin)
            user.set_password(password)
            db.session.add(user)
            db.session.commit()
            
            if is_admin:
                logging.info(f"First user {username} registered as admin")
            return redirect(url_for('main.login'))
        except Exception as e:
            logging.error(f"Error during registration: {str(e)}")
            db.session.rollback()
            flash('Registration failed. Please try again.', 'error')

    return render_template('register.html')

@main.route('/login', methods=['GET', 'POST'])
def login():
    logging.info("Accessing login route")
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        user = User.query.filter_by(username=username).first()
        if user and user.check_password(password):
            access_token = create_access_token(
                identity=user.id,
                additional_claims={'is_admin': user.is_admin}
            )
            refresh_token = create_refresh_token(identity=user.id)
            
            response = make_response(redirect(url_for('main.devices')))
            set_access_cookies(response, access_token)
            set_refresh_cookies(response, refresh_token)
            return response
        else:
            logging.warning(f"Failed login attempt for user {username}")
            flash('Invalid username or password', 'error')
    
    return render_template('login.html')

@main.route('/refresh', methods=['POST'])
@jwt_required(refresh=True)
def refresh():
    try:
        current_user = get_jwt_identity()
        user = User.query.get(current_user)
        access_token = create_access_token(
            identity=current_user,
            additional_claims={'is_admin': user.is_admin}
        )
        
        response = jsonify({'msg': 'Token refreshed successfully'})
        set_access_cookies(response, access_token)
        
        return response
    except Exception as e:
        logging.error(f"Error refreshing token: {str(e)}")
        return jsonify({"msg": "Token refresh failed"}), 401

@main.route('/logout')
@jwt_required(optional=True)
def logout():
    logging.info("User logged out")
    response = make_response(redirect(url_for('main.login')))
    unset_jwt_cookies(response)
    return response

@main.route('/devices')
@jwt_required()
def devices():
    logging.info("Accessing devices route")
    current_user = get_jwt_identity()
    logging.info(f"User {current_user} accessing devices page")
    return render_template('devices.html')

@main.route('/api/devices', methods=['GET'])
@jwt_required()
def get_devices():
    logging.info("Fetching devices")
    current_user = get_jwt_identity()
    logging.info(f"User {current_user} fetching devices")
    try:
        devices = Device.query.all()
        logging.debug(f"Found {len(devices)} devices")
        return jsonify([{
            'id': device.id,
            'name': device.name,
            'ip_address': device.ip_address,
            'mac_address': device.mac_address,
            'status': device.status,
            'blocked': device.blocked,
            'last_seen': device.last_seen.isoformat() if device.last_seen else None
        } for device in devices])
    except Exception as e:
        logging.error(f"Error fetching devices: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@main.route('/api/devices/<int:device_id>/toggle', methods=['POST'])
@jwt_required()
def toggle_device(device_id):
    current_user = get_jwt_identity()
    logging.info(f"User {current_user} toggling device {device_id}")
    try:
        device = Device.query.get_or_404(device_id)
        device.blocked = not device.blocked
        db.session.commit()
        
        device_data = {
            'id': device.id,
            'name': device.name,
            'ip_address': device.ip_address,
            'mac_address': device.mac_address,
            'status': device.status,
            'blocked': device.blocked,
            'last_seen': device.last_seen.isoformat() if device.last_seen else None
        }
        
        emit('device_updated', device_data, broadcast=True, namespace='/')
        logging.info(f'Device {device_id} toggled. New blocked status: {device.blocked}')
        return jsonify({'success': True, 'blocked': device.blocked})
    except Exception as e:
        logging.error(f'Error toggling device {device_id}: {str(e)}')
        db.session.rollback()
        return jsonify({'error': 'Internal server error'}), 500

@main.route('/api/scan', methods=['POST'])
@jwt_required()
def scan():
    try:
        logging.info("Starting device scan")
        devices = scan_network()
        
        if not devices:
            logging.warning("No devices found during scan")
            return jsonify({
                'success': True,
                'devices': [],
                'message': 'No devices found. This might be due to network configuration or permissions.'
            })

        # Update database with found devices
        for device in devices:
            existing = Device.query.filter_by(mac_address=device['mac_address']).first()
            if existing:
                existing.ip_address = device['ip_address']
                existing.name = device['name']
                existing.status = device['status']
                existing.last_seen = device['last_seen']
            else:
                new_device = Device(**device)
                db.session.add(new_device)
        
        db.session.commit()
        
        # Get updated device list
        all_devices = Device.query.all()
        devices_data = [{
            'id': d.id,
            'name': d.name,
            'ip_address': d.ip_address,
            'mac_address': d.mac_address,
            'status': d.status,
            'blocked': d.blocked,
            'last_seen': d.last_seen.isoformat() if d.last_seen else None
        } for d in all_devices]

        socketio.emit('devices_update', devices_data)
        
        return jsonify({
            'success': True,
            'devices': devices_data,
            'message': f'Successfully found {len(devices)} devices'
        })
    except Exception as e:
        logging.error(f"Error during device scan: {str(e)}")
        db.session.rollback()
        return jsonify({
            'success': False,
            'message': 'Error during device scan. Please try again.'
        }), 500

@main.route('/network_usage')
@jwt_required()
def network_usage():
    try:
        current_user = get_jwt_identity()
        logging.info(f"User {current_user} accessing network usage page")
        
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(days=1)
        
        total_usage = db.session.query(
            func.sum(TotalNetworkUsage.bytes_sent + TotalNetworkUsage.bytes_recv)
        ).filter(
            TotalNetworkUsage.timestamp.between(start_time, end_time)
        ).scalar() or 0
        
        hourly_usage = db.session.query(
            func.date_trunc('hour', TotalNetworkUsage.timestamp).label('hour'),
            func.sum(TotalNetworkUsage.bytes_sent + TotalNetworkUsage.bytes_recv).label('usage')
        ).filter(
            TotalNetworkUsage.timestamp.between(start_time, end_time)
        ).group_by('hour').order_by('hour').all()
        
        hourly_data = [{'hour': entry.hour.isoformat(), 'usage': entry.usage} for entry in hourly_usage]
        
        return render_template('network_usage.html',
                             total_network_usage=total_usage,
                             hourly_data=hourly_data)
    except Exception as e:
        logging.error(f"Error accessing network usage page: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@main.route('/api/network_usage')
@jwt_required()
def get_network_usage():
    try:
        time_range = request.args.get('range', '24h')
        end_time = datetime.utcnow()
        
        if time_range == '7d':
            start_time = end_time - timedelta(days=7)
            interval = 'hour'
        elif time_range == '30d':
            start_time = end_time - timedelta(days=30)
            interval = 'day'
        else:  # 24h
            start_time = end_time - timedelta(days=1)
            interval = 'hour'

        usage_data = db.session.query(
            func.date_trunc(interval, TotalNetworkUsage.timestamp).label('interval'),
            func.sum(TotalNetworkUsage.bytes_sent + TotalNetworkUsage.bytes_recv).label('usage')
        ).filter(
            TotalNetworkUsage.timestamp.between(start_time, end_time)
        ).group_by('interval').order_by('interval').all()

        total_usage = sum(entry.usage for entry in usage_data) if usage_data else 0
        peak_usage = max((entry.usage for entry in usage_data), default=0)
        peak_time = next(
            (entry.interval for entry in usage_data if entry.usage == peak_usage),
            None
        )

        if len(usage_data) > 1:
            first_half = sum(entry.usage for entry in usage_data[:len(usage_data)//2])
            second_half = sum(entry.usage for entry in usage_data[len(usage_data)//2:])
            trend = (second_half - first_half) / first_half if first_half > 0 else 0
        else:
            trend = 0

        response_data = {
            'labels': [entry.interval.isoformat() for entry in usage_data],
            'values': [float(entry.usage or 0) / (1024 * 1024) for entry in usage_data],
            'statistics': {
                'total_usage': float(total_usage) / (1024 * 1024),
                'peak_usage_time': peak_time.strftime('%Y-%m-%d %H:%M') if peak_time else None,
                'trend': trend
            }
        }

        return jsonify(response_data)
    except Exception as e:
        logging.error(f"Error fetching network usage data: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@main.route('/admin')
@admin_required
def admin_dashboard():
    try:
        total_devices = Device.query.count()
        active_devices = Device.query.filter_by(status=True).count()
        blocked_devices = Device.query.filter_by(blocked=True).count()
        
        total_usage = db.session.query(func.sum(TotalNetworkUsage.bytes_sent + TotalNetworkUsage.bytes_recv)).scalar() or 0
        
        devices = Device.query.all()
        network_settings = NetworkSettings.query.all()
        
        return render_template('admin/dashboard.html',
                             total_devices=total_devices,
                             active_devices=active_devices,
                             blocked_devices=blocked_devices,
                             total_usage=total_usage,
                             devices=devices,
                             network_settings=network_settings)
    except Exception as e:
        logging.error(f"Error accessing admin dashboard: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@main.route('/api/admin/settings', methods=['POST'])
@admin_required
def add_network_setting():
    try:
        data = request.get_json()
        current_user_id = get_jwt_identity()
        
        setting = NetworkSettings(
            setting_name=data['name'],
            setting_value=data['value'],
            description=data.get('description', ''),
            modified_by=current_user_id
        )
        
        db.session.add(setting)
        db.session.commit()
        
        return jsonify({'success': True, 'setting_id': setting.id})
    except Exception as e:
        logging.error(f"Error adding network setting: {str(e)}")
        db.session.rollback()
        return jsonify({'error': 'Internal server error'}), 500

@main.route('/api/admin/settings/<int:setting_id>', methods=['PUT', 'DELETE'])
@admin_required
def manage_network_setting(setting_id):
    try:
        setting = NetworkSettings.query.get_or_404(setting_id)
        
        if request.method == 'DELETE':
            db.session.delete(setting)
            db.session.commit()
            return jsonify({'success': True})
            
        data = request.get_json()
        setting.setting_value = data['value']
        setting.description = data.get('description', setting.description)
        setting.modified_by = get_jwt_identity()
        
        db.session.commit()
        return jsonify({'success': True})
    except Exception as e:
        logging.error(f"Error managing network setting: {str(e)}")
        db.session.rollback()
        return jsonify({'error': 'Internal server error'}), 500

@main.route('/api/admin/devices/<int:device_id>', methods=['PUT'])
@admin_required
def update_device(device_id):
    try:
        device = Device.query.get_or_404(device_id)
        data = request.get_json()
        
        device.name = data.get('name', device.name)
        device.bandwidth_limit = data.get('bandwidth_limit', device.bandwidth_limit)
        device.notes = data.get('notes', device.notes)
        
        db.session.commit()
        
        device_data = {
            'id': device.id,
            'name': device.name,
            'ip_address': device.ip_address,
            'mac_address': device.mac_address,
            'status': device.status,
            'blocked': device.blocked,
            'bandwidth_limit': device.bandwidth_limit,
            'notes': device.notes,
            'last_seen': device.last_seen.isoformat() if device.last_seen else None
        }
        
        emit('device_updated', device_data, broadcast=True, namespace='/')
        return jsonify({'success': True})
    except Exception as e:
        logging.error(f"Error updating device: {str(e)}")
        db.session.rollback()
        return jsonify({'error': 'Internal server error'}), 500
--------------------------------------------------

File: ./app.py
--------------------------------------------------
Contents of ./app.py:
import os
from flask import Flask
import logging
import eventlet
from datetime import timedelta
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address

eventlet.monkey_patch()

from extensions import db, jwt, socketio, cors
from flask_migrate import Migrate
from routes import main as main_blueprint

def create_app():
    app = Flask(__name__)

    # Setup logging for production
    logging.basicConfig(
        level=logging.INFO if not app.debug else logging.DEBUG,
        format='%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]',
        datefmt='%Y-%m-%d %H:%M:%S',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('wifi_manager.log')
        ]
    )

    # Setup secret key and database
    app.secret_key = os.environ.get("FLASK_SECRET_KEY") or os.urandom(24)
    app.config["SQLALCHEMY_DATABASE_URI"] = os.environ.get("DATABASE_URL")
    app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {
        "pool_recycle": 300,
        "pool_pre_ping": True,
    }

    # Setup JWT with secure settings
    app.config["JWT_SECRET_KEY"] = os.environ.get("FLASK_SECRET_KEY") or os.urandom(24)
    app.config["JWT_TOKEN_LOCATION"] = ["cookies"]
    app.config["JWT_ACCESS_COOKIE_PATH"] = "/"
    app.config["JWT_REFRESH_COOKIE_PATH"] = "/refresh"
    app.config["JWT_COOKIE_CSRF_PROTECT"] = True
    app.config["JWT_COOKIE_SECURE"] = not app.debug  # True in production
    app.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(hours=1)
    app.config['JWT_REFRESH_TOKEN_EXPIRES'] = timedelta(days=30)
    app.config['JWT_COOKIE_SAMESITE'] = 'Lax'

    # Setup rate limiting
    limiter = Limiter(
        app=app,
        key_func=get_remote_address,
        default_limits=["200 per day", "50 per hour"],
        storage_uri="memory://"
    )

    # Add rate limits for specific endpoints
    limiter.limit("5/minute")(main_blueprint)

    # Set environment flag
    app.config['RUNNING_ON_REPLIT'] = os.environ.get('REPL_ID') is not None

    # Initialize extensions
    db.init_app(app)
    jwt.init_app(app)
    cors.init_app(app, supports_credentials=True)
    socketio.init_app(app, cors_allowed_origins="*", async_mode='eventlet', logger=True, engineio_logger=True)
    
    # Initialize Flask-Migrate
    migrate = Migrate(app, db)

    # Add Socket.IO logging
    logging.getLogger('socketio').setLevel(logging.INFO)
    logging.getLogger('engineio').setLevel(logging.INFO)

    # Register the Blueprint
    app.register_blueprint(main_blueprint)

    # Initialize database and start monitoring
    with app.app_context():
        db.create_all()
        
        # Start network monitoring
        from network_scanner import start_total_usage_monitoring
        start_total_usage_monitoring()

    @socketio.on_error_default
    def default_error_handler(e):
        app.logger.error(f'An error occurred: {str(e)}')

    return app

--------------------------------------------------

File: ./image.png
--------------------------------------------------
Could not read file: ./image.png. Error: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
--------------------------------------------------

File: ./network_scanner.py
--------------------------------------------------
Contents of ./network_scanner.py:
import psutil
import netifaces
import logging
import ipaddress
from datetime import datetime
import socket
import threading
import time
import os

def get_network_interfaces():
    """Get all active network interfaces."""
    interfaces = []
    try:
        for iface in netifaces.interfaces():
            addrs = netifaces.ifaddresses(iface)
            if netifaces.AF_INET in addrs:  # Has IPv4
                stats = psutil.net_io_counters(pernic=True).get(iface)
                if stats and (stats.bytes_sent > 0 or stats.bytes_recv > 0):
                    # Skip loopback and virtual interfaces
                    if not iface.startswith(('lo', 'docker', 'veth', 'br-')):
                        interfaces.append(iface)
                        logging.debug(f"Found active interface: {iface}")
        return interfaces
    except Exception as e:
        logging.error(f"Error getting network interfaces: {str(e)}")
        return []

def get_device_name(ip):
    """Try to get device hostname with improved error handling."""
    try:
        hostname = socket.gethostbyaddr(ip)[0]
        if hostname and not hostname.startswith('_'):
            logging.debug(f"Resolved hostname for {ip}: {hostname}")
            return hostname
    except (socket.herror, socket.gaierror) as e:
        logging.debug(f"Could not resolve hostname for {ip}: {str(e)}")
    except Exception as e:
        logging.error(f"Error getting device name for {ip}: {str(e)}")
    return f"Device-{ip.split('.')[-1]}"

def scan_network():
    """Scan network for devices using socket-based scanning."""
    devices = []
    try:
        # Get all network interfaces
        interfaces = get_network_interfaces()
        if not interfaces:
            logging.error("No network interfaces found")
            return []

        for iface in interfaces:
            try:
                addrs = netifaces.ifaddresses(iface)
                if netifaces.AF_INET not in addrs:
                    continue

                ip_info = addrs[netifaces.AF_INET][0]
                ip = ip_info['addr']
                netmask = ip_info['netmask']

                # Create network address for scanning
                network = ipaddress.IPv4Network(f"{ip}/{netmask}", strict=False)
                logging.info(f"Scanning network {network} on interface {iface}")

                # Scan each host in the network
                for host in network.hosts():
                    host_str = str(host)
                    if host_str == ip:  # Skip our own IP
                        continue

                    try:
                        # Try connecting to common ports
                        for port in [80, 443, 22]:
                            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                            sock.settimeout(0.1)
                            if sock.connect_ex((host_str, port)) in [0, 111]:
                                # Get hostname and MAC address
                                try:
                                    hostname = socket.gethostbyaddr(host_str)[0]
                                except:
                                    hostname = f"Device-{host_str.split('.')[-1]}"

                                # Get MAC address from ARP cache
                                mac = None
                                try:
                                    with open('/proc/net/arp', 'r') as f:
                                        lines = f.readlines()[1:]
                                        for line in lines:
                                            fields = line.strip().split()
                                            if fields[0] == host_str:
                                                mac = fields[3]
                                                break
                                except Exception as e:
                                    logging.debug(f"Could not read ARP cache: {e}")

                                if not mac:
                                    mac = f"Unknown-{host_str.replace('.', '-')}"

                                device = {
                                    'ip_address': host_str,
                                    'mac_address': mac,
                                    'name': hostname,
                                    'status': True,
                                    'blocked': False,
                                    'last_seen': datetime.utcnow()
                                }
                                devices.append(device)
                                logging.info(f"Found device: {hostname} ({host_str})")
                                break  # Found a responding port, no need to check others

                            sock.close()
                    except Exception as e:
                        logging.debug(f"Error scanning host {host_str}: {e}")
                        continue

            except Exception as e:
                logging.error(f"Error scanning interface {iface}: {e}")
                continue

        logging.info(f"Scan completed. Found {len(devices)} devices")
        return devices

    except Exception as e:
        logging.error(f"Error in network scan: {e}")
        return devices

def get_total_network_usage():
    """Get total network usage for all interfaces."""
    try:
        io_counters = psutil.net_io_counters()
        return {
            'timestamp': datetime.utcnow(),
            'bytes_sent': io_counters.bytes_sent,
            'bytes_recv': io_counters.bytes_recv
        }
    except Exception as e:
        logging.error(f"Error getting total network usage: {str(e)}")
        return None

def start_total_usage_monitoring():
    """Start background thread to monitor total network usage."""
    from flask import current_app
    app = current_app._get_current_object()
    
    def monitor():
        logging.info("Starting network usage monitoring")
        previous_usage = get_total_network_usage()
        
        while True:
            try:
                time.sleep(30)  # Update every 30 seconds
                with app.app_context():
                    from extensions import db
                    from models import TotalNetworkUsage
                    
                    current_usage = get_total_network_usage()
                    if current_usage and previous_usage:
                        bytes_sent = max(0, current_usage['bytes_sent'] - previous_usage['bytes_sent'])
                        bytes_recv = max(0, current_usage['bytes_recv'] - previous_usage['bytes_recv'])
                        
                        if bytes_sent > 0 or bytes_recv > 0:
                            total_usage = TotalNetworkUsage(
                                timestamp=current_usage['timestamp'],
                                bytes_sent=bytes_sent,
                                bytes_recv=bytes_recv
                            )
                            db.session.add(total_usage)
                            db.session.commit()
                            logging.debug(f"Recorded network usage: sent={bytes_sent}, recv={bytes_recv}")
                        
                        previous_usage = current_usage
            except Exception as e:
                logging.error(f"Error in network monitoring: {str(e)}")
                if 'db' in locals():
                    db.session.rollback()
                time.sleep(5)  # Wait before retrying after error
    
    monitor_thread = threading.Thread(target=monitor, daemon=True)
    monitor_thread.start()
    logging.info("Network usage monitoring thread started")

--------------------------------------------------

Directory: ./static/
--------------------------------------------------
File: ./static/css/custom.css
--------------------------------------------------
Contents of ./static/css/custom.css:
/* custom.css */

/* General Styles */
body {
    background-color: var(--bs-dark);
    color: var(--bs-light);
}

.container {
    padding-top: 20px;
}

/* Navbar */
.navbar {
    margin-bottom: 20px;
    background-color: var(--bs-gray-800) !important;
}

/* Table */
.table {
    background-color: var(--bs-gray-900);
    color: var(--bs-light);
}

.table thead th {
    background-color: var(--bs-gray-800);
    color: var(--bs-light);
    border-color: var(--bs-gray-700);
}

.table tbody tr:hover {
    background-color: var(--bs-gray-700);
}

/* Buttons */
.btn {
    min-width: 80px;
}

/* Loading Indicator */
#loading-indicator {
    color: var(--bs-primary);
}

/* Modal */
.modal-content {
    background-color: var(--bs-gray-800);
    color: var(--bs-light);
}

.modal-header, .modal-footer {
    border-color: var(--bs-gray-700);
}

/* Forms */
.form-control {
    background-color: var(--bs-gray-700);
    color: var(--bs-light);
    border-color: var(--bs-gray-600);
}

.form-control:focus {
    background-color: var(--bs-gray-600);
    color: var(--bs-light);
}

--------------------------------------------------

File: ./static/js/admin.js
--------------------------------------------------
Contents of ./static/js/admin.js:
// Admin Dashboard JavaScript

document.addEventListener('DOMContentLoaded', function() {
    // Check first user info
    fetch('/api/check_first_user')
        .then(response => response.json())
        .then(data => {
            if (data.message) {
                const alert = document.createElement('div');
                alert.className = 'alert alert-info alert-dismissible fade show';
                alert.innerHTML = `
                    ${data.message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                document.querySelector('.container-fluid').insertBefore(alert, document.querySelector('.container-fluid').firstChild);
            }
        })
        .catch(error => console.error('Error fetching first user:', error));

    // Initialize tooltips
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl)
    });

    // Network Settings
    const saveSettingBtn = document.getElementById('saveSettingBtn');
    if (saveSettingBtn) {
        saveSettingBtn.addEventListener('click', function() {
            const name = document.getElementById('settingName').value;
            const value = document.getElementById('settingValue').value;
            const description = document.getElementById('settingDescription').value;

            fetchWithAuth('/api/admin/settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name, value, description })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error saving setting');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error saving setting');
            });
        });
    }

    // Delete Setting
    document.querySelectorAll('.delete-setting').forEach(button => {
        button.addEventListener('click', function() {
            const settingId = this.dataset.settingId;
            if (confirm('Are you sure you want to delete this setting?')) {
                fetchWithAuth(`/api/admin/settings/${settingId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error deleting setting');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error deleting setting');
                });
            }
        });
    });

    // Edit Device
    document.querySelectorAll('.edit-device').forEach(button => {
        button.addEventListener('click', function() {
            const deviceId = this.dataset.deviceId;
            const row = this.closest('tr');
            
            document.getElementById('deviceId').value = deviceId;
            document.getElementById('deviceName').value = row.cells[0].textContent;
            document.getElementById('bandwidthLimit').value = row.cells[5].textContent.trim() === 'Unlimited' 
                ? 0 
                : parseInt(row.cells[5].textContent);
            document.getElementById('deviceNotes').value = row.cells[6].textContent;
        });
    });

    // Save Device Changes
    const saveDeviceBtn = document.getElementById('saveDeviceBtn');
    if (saveDeviceBtn) {
        saveDeviceBtn.addEventListener('click', function() {
            const deviceId = document.getElementById('deviceId').value;
            const name = document.getElementById('deviceName').value;
            const bandwidthLimit = parseInt(document.getElementById('bandwidthLimit').value);
            const notes = document.getElementById('deviceNotes').value;

            fetchWithAuth(`/api/admin/devices/${deviceId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    name, 
                    bandwidth_limit: bandwidthLimit,
                    notes 
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error updating device');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error updating device');
            });
        });
    }

    // Initialize Socket.IO for real-time updates
    const socket = io();
    
    socket.on('device_updated', function(device) {
        const row = document.querySelector(`tr[data-device-id="${device.id}"]`);
        if (row) {
            updateDeviceRow(row, device);
        }
    });

    function updateDeviceRow(row, device) {
        row.cells[0].textContent = device.name;
        row.cells[4].textContent = `${(device.data_usage / (1024 * 1024)).toFixed(2)} MB`;
        row.cells[5].textContent = device.bandwidth_limit === 0 ? 'Unlimited' : `${device.bandwidth_limit} Mbps`;
        row.cells[6].textContent = device.notes || '';
        
        const statusBadge = row.cells[3].querySelector('.badge');
        statusBadge.className = `badge bg-${device.status ? 'success' : 'danger'}`;
        statusBadge.textContent = device.status ? 'Online' : 'Offline';
        
        const toggleButton = row.querySelector('.toggle-device');
        toggleButton.className = `btn btn-sm btn-${device.blocked ? 'success' : 'danger'} toggle-device`;
        toggleButton.textContent = device.blocked ? 'Unblock' : 'Block';
    }
});
--------------------------------------------------

File: ./static/js/main.js
--------------------------------------------------
Contents of ./static/js/main.js:
// Define fetchWithAuth function
function fetchWithAuth(url, options = {}) {
    options.credentials = 'include';  // Include cookies in the request
    return fetch(url, options);
}

document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM Content Loaded');
    
    const scanButton = document.getElementById('scan-button');
    if (scanButton) {
        scanButton.addEventListener('click', function() {
            const button = this;
            const originalText = button.innerHTML;
            
            // Show loading state
            button.disabled = true;
            button.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Scanning...';
            
            console.log('Starting network scan...');
            
            fetchWithAuth('/api/scan', { 
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('Scan response:', data);
                
                if (!data.devices) {
                    throw new Error('Invalid response format');
                }
                
                // Update device list
                const deviceList = document.getElementById('device-list');
                if (!deviceList) {
                    throw new Error('Device list element not found');
                }
                
                if (data.devices.length === 0) {
                    deviceList.innerHTML = '<tr><td colspan="6">No devices found on the network. Please check your network connection.</td></tr>';
                } else {
                    deviceList.innerHTML = '';
                    data.devices.forEach(device => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${device.name || 'Unknown'}</td>
                            <td>${device.ip_address}</td>
                            <td>${device.mac_address}</td>
                            <td>
                                <span class="badge bg-${device.status ? 'success' : 'danger'}">
                                    ${device.status ? 'Online' : 'Offline'}
                                </span>
                            </td>
                            <td>${device.last_seen ? new Date(device.last_seen).toLocaleString() : 'Never'}</td>
                            <td>
                                <button class="btn btn-${device.blocked ? 'success' : 'danger'} btn-sm toggle-device" 
                                        data-device-id="${device.id}">
                                    ${device.blocked ? 'Unblock' : 'Block'}
                                </button>
                            </td>
                        `;
                        deviceList.appendChild(row);
                    });
                }
            })
            .catch(error => {
                console.error('Scan error:', error);
                const deviceList = document.getElementById('device-list');
                if (deviceList) {
                    deviceList.innerHTML = '<tr><td colspan="6">Error scanning for devices. Please try again.</td></tr>';
                }
            })
            .finally(() => {
                // Reset button state
                button.disabled = false;
                button.innerHTML = originalText;
            });
        });
    }

    // Handle device updates via WebSocket
    const socket = io();
    socket.on('devices_update', function(devices) {
        refreshDeviceList(devices);
    });

    // Handle device toggling
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('toggle-device')) {
            const deviceId = e.target.dataset.deviceId;
            e.target.disabled = true;
            
            fetchWithAuth(`/api/devices/${deviceId}/toggle`, { 
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (!data.success) {
                    throw new Error('Failed to toggle device');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error toggling device. Please try again.');
            })
            .finally(() => {
                e.target.disabled = false;
            });
        }
    });

    function refreshDeviceList(devices) {
        const deviceList = document.getElementById('device-list');
        if (!deviceList) {
            console.error('Device list element not found');
            return;
        }
        
        if (!devices || devices.length === 0) {
            deviceList.innerHTML = '<tr><td colspan="6">No devices found. Try scanning for new devices.</td></tr>';
        } else {
            deviceList.innerHTML = '';
            devices.forEach(device => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${device.name || 'Unknown'}</td>
                    <td>${device.ip_address}</td>
                    <td>${device.mac_address}</td>
                    <td>
                        <span class="badge bg-${device.status ? 'success' : 'danger'}">
                            ${device.status ? 'Online' : 'Offline'}
                        </span>
                    </td>
                    <td>${device.last_seen ? new Date(device.last_seen).toLocaleString() : 'Never'}</td>
                    <td>
                        <button class="btn btn-${device.blocked ? 'success' : 'danger'} btn-sm toggle-device" 
                                data-device-id="${device.id}">
                            ${device.blocked ? 'Unblock' : 'Block'}
                        </button>
                    </td>
                `;
                deviceList.appendChild(row);
            });
        }
    }
});

--------------------------------------------------

Directory: ./templates/
--------------------------------------------------
File: ./templates/index.html
--------------------------------------------------
Contents of ./templates/index.html:
{% extends "base.html" %}

{% block content %}
<h1>Welcome to Wi-Fi Network Manager</h1>
<p>Manage your network devices with ease.</p>
<a href="{{ url_for('main.login') }}" class="btn btn-primary">Login</a>
<a href="{{ url_for('main.register') }}" class="btn btn-secondary">Register</a>
{% endblock %}

--------------------------------------------------

File: ./templates/login.html
--------------------------------------------------
Contents of ./templates/login.html:
{% extends "base.html" %}

{% block content %}
<h2>Login</h2>
{% with messages = get_flashed_messages(with_categories=true) %}
  {% if messages %}
    {% for category, message in messages %}
      <div class="alert alert-{{ category }}">{{ message }}</div>
    {% endfor %}
  {% endif %}
{% endwith %}
<form action="{{ url_for('main.login') }}" method="post">
    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <input type="text" class="form-control" id="username" name="username" required>
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input type="password" class="form-control" id="password" name="password" required>
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</form>
{% endblock %}

--------------------------------------------------

File: ./templates/register.html
--------------------------------------------------
Contents of ./templates/register.html:
{% extends "base.html" %}

{% block content %}
<h2>Register</h2>
<form action="{{ url_for('main.register') }}" method="post">
    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <input type="text" class="form-control" id="username" name="username" required>
    </div>
    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <input type="email" class="form-control" id="email" name="email" required>
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input type="password" class="form-control" id="password" name="password" required>
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</form>
{% endblock %}

--------------------------------------------------

File: ./templates/network_usage.html
--------------------------------------------------
Contents of ./templates/network_usage.html:
{% extends "base.html" %}

{% block content %}
<h2>Network Usage Analytics</h2>

<div class="row mb-4">
    <div class="col-md-12">
        <div class="btn-group mb-3" role="group" aria-label="Time range selector">
            <button type="button" class="btn btn-secondary time-range-btn" data-range="24h">24 Hours</button>
            <button type="button" class="btn btn-secondary time-range-btn" data-range="7d">7 Days</button>
            <button type="button" class="btn btn-secondary time-range-btn" data-range="30d">30 Days</button>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-8">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Network Usage Over Time</h5>
                <div class="chart-container" style="position: relative; height:400px;">
                    <canvas id="networkUsageChart"></canvas>
                </div>
                <div class="text-center mt-2">
                    <button class="btn btn-sm btn-secondary" id="resetZoom">Reset Zoom</button>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Device Usage Distribution</h5>
                <canvas id="deviceDistributionChart"></canvas>
            </div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Network Statistics</h5>
                <div id="networkStats">
                    <div class="d-flex justify-content-between mb-2">
                        <span>Total Usage:</span>
                        <span class="text-info" id="totalUsage">{{ (total_network_usage / (1024 * 1024)) | round(2) }} MB</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Peak Usage Time:</span>
                        <span class="text-info" id="peakUsageTime">Loading...</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Current Trend:</span>
                        <span id="usageTrend">
                            <span class="text-success">↑ Increasing</span>
                        </span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>Period Comparison:</span>
                        <span class="text-info" id="periodComparison">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Top Devices</h5>
                <div class="list-group">
                    {% for device in top_devices %}
                    <div class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="mb-0">{{ device.name }}</h6>
                            <small class="text-muted">{{ device.ip_address }}</small>
                        </div>
                        <span class="badge bg-primary rounded-pill">
                            {{ (device.total_usage / (1024 * 1024)) | round(2) }} MB
                        </span>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title d-flex justify-content-between align-items-center">
                    Device Usage Details
                    <div class="btn-group">
                        <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                            Sort By
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item sort-devices" href="#" data-sort="name">Name</a></li>
                            <li><a class="dropdown-item sort-devices" href="#" data-sort="usage">Usage</a></li>
                            <li><a class="dropdown-item sort-devices" href="#" data-sort="last_seen">Last Seen</a></li>
                        </ul>
                    </div>
                </h5>
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Device Name</th>
                                <th>IP Address</th>
                                <th>MAC Address</th>
                                <th>Status</th>
                                <th>Total Usage</th>
                                <th>Last Seen</th>
                            </tr>
                        </thead>
                        <tbody id="deviceTableBody">
                            {% for device in devices %}
                            <tr>
                                <td>{{ device.name }}</td>
                                <td>{{ device.ip_address }}</td>
                                <td>{{ device.mac_address }}</td>
                                <td>
                                    <span class="badge bg-{{ device.status and 'success' or 'danger' }}">
                                        {{ device.status and 'Online' or 'Offline' }}
                                    </span>
                                </td>
                                <td>{{ (device.total_usage / (1024 * 1024)) | round(2) }} MB</td>
                                <td>{{ device.last_seen.strftime('%Y-%m-%d %H:%M:%S') if device.last_seen else 'Never' }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
<script src="https://cdn.jsdelivr.net/npm/date-fns"></script>
{% endblock %}

--------------------------------------------------

File: ./templates/base.html
--------------------------------------------------
Contents of ./templates/base.html:
<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wi-Fi Network Manager</title>
    <link rel="stylesheet" href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/custom.css') }}">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="{{ url_for('main.index') }}">Wi-Fi Network Manager</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('main.index') }}">Home</a>
                    </li>
                    {% if g.user %}
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('main.devices') }}">Devices</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('main.network_usage') }}">Network Usage</a>
                    </li>
                    {% if g.user and g.user.is_admin %}
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('main.admin_dashboard') }}">Admin Dashboard</a>
                    </li>
                    {% endif %}
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('main.logout') }}">Logout</a>
                    </li>
                    {% else %}
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('main.login') }}">Login</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('main.register') }}">Register</a>
                    </li>
                    {% endif %}
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        {% block content %}{% endblock %}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.min.js" integrity="sha512-Xm9qbB6Pu06k3PUwPj785dyTl6oHxgsv9nHp7ej7nCpAqGZT3OZpsELuCYX05DdonFpTlBpXMOxjavIAIUwr0w==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
    {% if request.endpoint == 'main.admin_dashboard' %}
    <script src="{{ url_for('static', filename='js/admin.js') }}"></script>
    {% endif %}
</body>
</html>

--------------------------------------------------

File: ./templates/devices.html
--------------------------------------------------
Contents of ./templates/devices.html:
{% extends "base.html" %}

{% block content %}
{% if config.get('RUNNING_ON_REPLIT') %}
<div class="alert alert-warning" role="alert">
    <h4 class="alert-heading">Cloud Deployment Notice</h4>
    <p>This application is running on a cloud platform and cannot scan your local network. For full functionality:</p>
    <ul>
        <li>Deploy this application on your local network</li>
        <li>Run it on a device within your network</li>
        <li>Ensure proper network permissions</li>
    </ul>
    <hr>
    <p class="mb-0">Currently showing demo data for demonstration purposes.</p>
</div>
{% endif %}

<div class="container">
    <h2>Connected Devices</h2>
    <button id="scan-button" class="btn btn-primary mb-3">Scan for new devices</button>
    
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>IP Address</th>
                    <th>MAC Address</th>
                    <th>Status</th>
                    <th>Last Seen</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="device-list">
                <tr>
                    <td colspan="6">No devices found. Try scanning for new devices.</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
{% endblock %}

--------------------------------------------------

